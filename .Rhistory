) %>%
ungroup() %>%
left_join(tbl_os_timeouts, by = c("participant_id", "session_id")) %>%
left_join(tbl_ss_timeouts, by = c("participant_id", "session_id")) %>%
mutate(session_id = 9999) %>%
pivot_wider(
id_cols = participant_id, names_from = session_id, values_from = c(OS, SS, prop_timeout_os, prop_timeout_ss)
)
tbl_proc_performance_participants$thx_lo_os <-
qbinom(.95, tbl_trials_administered$n_administered[tbl_trials_administered$task == "os_processing"], .5)/
(tbl_trials_administered$n_administered[tbl_trials_administered$task == "os_processing"])
tbl_proc_performance_participants$thx_lo_ss <-
qbinom(.95, tbl_trials_administered$n_administered[tbl_trials_administered$task == "ss_processing"], .5)/
(tbl_trials_administered$n_administered[tbl_trials_administered$task == "ss_processing"])
tbl_proc_performance_participants <- tbl_proc_performance_participants %>%
mutate(
excl_os = OS_9999 < thx_lo_os,
excl_ss = SS_9999< thx_lo_ss,
proc_below_thx = excl_os + excl_ss > 0
)
# add exclusions to overview tbl
tbl_ids_lookup <- tbl_n_trials %>%
left_join(
tbl_proc_performance_participants[, c("participant_id", "proc_below_thx")],
by = "participant_id"
)
return(tbl_ids_lookup)
}
load(sprintf("data/wave%i/banditsWave%ifull.Rda", session, session))
load(sprintf("data/wave%i/qswave%iFull.Rda", session, session))
load(sprintf("data/wave%i/comprehension%i.Rda", session, session))
##### WM
# session1 <- read.csv("data/all-data/BanditLookup1.csv")
# session2 <- read.csv("data/all-data/BanditLookup2.csv")
#
# if (session == 2) {
#   lookup <- session2
#   session2$wave1ID <- session1$ID[match(session2$PID, session1$PID)]
#   sam$ID <- session2$wave1ID[match(sam$ID, session2$ID)]
#   horizon$ID <- session2$wave1ID[match(horizon$ID, session2$ID)]
#   restless$ID <- session2$wave1ID[match(restless$ID, session2$ID)]
#   comprehension$ID <- session2$wave1ID[match(comprehension$ID, session2$ID)]
# } else if (session == 1) {
#   lookup = session1
# }
lookup <- read.csv("data/FINALlookup.csv")
#load what mirko did here
# wm <- readRDS("analysis/subjects-excl-wm.rds")
# wm$prolific_pid <- wm$participant_id
# wm <- subset(wm, is.element(prolific_pid, lookup$PID))
# lookup$perfWM <- NA
# lookup$perfWM <- wm$excl_subject[match(lookup$PID, wm$prolific_pid)]
####### incomplete data
complete_subs <- intersect(unique(qdat$ID), unique(horizon$ID))
complete_subs <- intersect(complete_subs, unique(sam$ID))
complete_subs <- intersect(complete_subs, unique(restless$ID))
lookup$incomplete_data <- ifelse(is.element(lookup$ID, complete_subs), 0, 1)
#### used external aids
lookup$WMaid <- NA
lookup$slotaid <- NA
lookup$WMaid[match(qdat$ID, lookup$ID)] <- qdat$mem_aid_0
lookup$slotaid[match(qdat$ID, lookup$ID)] <- qdat$slot_aid_0
#### bandit performance
exclude_based_on_performance <- function(df){
n_arms <- length(grep("reward", colnames(df)))-1 # -1 bc 1 col is the reward they actually got
n <- length(na.omit(df$chosen[df$ID == df$ID[1]]))
print(n)
chance_level <- 1/n_arms
best_by_chance <- qbinom(0.95, n, chance_level)
# proportion of optimal choices you get by chance
pchance <- best_by_chance/n
print(pchance)
df$row <- 1:nrow(df)
df$optimalR <- rep(apply(as.array(df$row[df$ID == df$ID[1]]), 1, function(x) max(df[x, grepl("reward", colnames(df))])),
length(unique(df$ID)))
df$chooseBest <- ifelse(df$reward == df$optimalR, 1, 0)
overall <- plyr::ddply(df, ~ID, summarise, optimal = meann(chooseBest))
overall$excl <- ifelse(overall$optimal <= pchance, 1, 0)
return(overall)
}
excl_h <- exclude_based_on_performance(horizon[horizon$trial > 4, ])
excl_s <- exclude_based_on_performance(sam)
excl_r <- exclude_based_on_performance(restless)
# # get rid of person w/o data
# overall <- subset(overall, !is.na(optimal))
#
# pl_hist_horizon <- plot_my_chance_hist(overall, "Horizon", pchance)
lookup$perfHorizon <- NA
lookup$perfHorizon[match(excl_h$ID, lookup$ID)] <- excl_h$excl
lookup$perfSam <- NA
lookup$perfSam[match(excl_s$ID, lookup$ID)] <- excl_s$excl
lookup$perfRestless <- NA
lookup$perfRestless[match(excl_r$ID, lookup$ID)] <- excl_r$excl
# testing the matchup
print("tests. The below needs to be all TRUE")
print(table(na.omit(lookup$ID[lookup$perfHorizon == 1]) == excl_h$ID[excl_h$excl == 1]))
print(table(na.omit(lookup$ID[lookup$perfSam == 1]) == excl_s$ID[excl_s$excl == 1]))
print(table(na.omit(lookup$ID[lookup$perfRestless == 1]) == excl_r$ID[excl_r$excl == 1]))
#lookup$perfHorizon <- lookup %>% left_join(overall, by = "ID") %>% mutate(optimal = ifelse(optimal <= pchance, 1, 0)) %>% select(optimal) %>% as_vector()
#lookup$perfHorizon[match(overall$ID, lookup$ID)] <- ifelse(overall$optimal <=pchance, 1, 0)
# save_my_pdf(
#   gridExtra::arrangeGrob(pl_hist_horizon, pl_hist_sam, pl_hist_restless, nrow = 1),
#   str_c("figures/EDA/bandit-histograms-session-", session, ".pdf"), 16, 5
# )
#### comprehension attempts horizon
mean_sd <- plyr::ddply(comprehension, ~task, summarise, meanComp = mean(compAttempts, na.rm =T), SD = sd(compAttempts, na.rm = T))
mean_sd$SD <- 2*mean_sd$SD + mean_sd$meanComp
mean_SD <- meann(comprehension$compAttempts) + 2*sd(comprehension$compAttempts, na.rm = T)
comprehension$excl <- ifelse(comprehension$compAttempts > mean_sd$SD[match(comprehension$task, mean_sd$task)], 1, 0)
#comprehension$excl <- ifelse(comprehension$compAttempts > mean_SD, 1, 0)
table(comprehension$excl)
lookup$compHorizon <- lookup %>% left_join(comprehension %>% filter(task == "horizon"), by = "ID") %>% select(excl) %>% as_vector()
lookup$compSam <- lookup %>% left_join(comprehension %>% filter(task == "sam"), by = "ID") %>% select(excl) %>% as_vector()
lookup$compRestless <- lookup %>% left_join(comprehension %>% filter(task == "restless"), by = "ID") %>% select(excl) %>% as_vector()
# comp <- plyr::ddply(comprehension, ~ID, summarise, excl = sum(excl))
# comp$ex <- ifelse(comp$excl > 1, 1, 0)
# table(comp$ex)
#
# lookup$comprehension[match(comp$ID, lookup$ID)] <- comp$ex
#lookup$compHorizon[match(comprehension$ID[comprehension$task == "horizon"], lookup$ID)] <- comprehension$excl[comprehension$task == "horizon"]
#### comprehension attempts sam
#lookup$compSam[match(comprehension$ID[comprehension$task == "sam"], lookup$ID)] <- comprehension$excl[comprehension$task == "sam"]
#### comprehension attempts 4arb
#lookup$compRestless[match(comprehension$ID[comprehension$task == "restless"], lookup$ID)] <- comprehension$excl[comprehension$task == "restless"]
#### attention checks
lookup$attention <- NA
lookup$attention <- lookup %>% left_join(qdat, by = "ID") %>% mutate(attention = ifelse(attention1 < 2, 1, 0)) %>% select(attention) %>% as_vector()
#test:
print(table(na.omit(lookup$ID[lookup$attention == 1]) == qdat$ID[qdat$attention1 < 2]))
#lookup$attention[match(qdat$ID, lookup$ID)] <- ifelse(qdat$attention1 < 2, 1, 0)
table(lookup$attention)
##### total
lookup$totalExclude <- apply(as.array(1:nrow(lookup)), 1, function(x) sum(as.numeric(unlist(lookup[x, c(grep("incomplete_data", colnames(lookup)): ncol(lookup))])), na.rm = T))
tbl_lookup_wm <- exclusion_criteria_wm_tasks(session - 1)
View(comprehension)
View(mean_sd)
rm(list = ls())
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
session <- 1
load(paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
if (!is.element("KLM0", colnames(sam))) {
sam <- get_KL_into_df(sam)
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
if (!is.element("bayMeanL", colnames(horizon))) {
horizon$bayMeanL <- NA
horizon$bayMeanR <- NA
horizon$bayVarL <- NA
horizon$bayVarR <- NA
horizon$row <- 1:nrow(horizon)
for (i in horizon$row[horizon$trial == 5]){
horizon[horizon$row == i, grep("bay", colnames(horizon))] <- bayIncrAtOnce(i, horizon)
}
horizon$V <- scale(getV(horizon$bayMeanL, horizon$bayMeanR))
horizon$RU <- scale(getRU(horizon$bayVarL, horizon$bayVarR))
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
if (!is.element("delta_mean", colnames(horizon))){
horizon$mean_L <- NA
horizon$mean_R <- NA
horizon$row <- 1:nrow(horizon)
horizon$mean_L[horizon$trial == 5] <- apply(as.array(horizon$row[horizon$trial == 5]), 1, function(x) meann(horizon$reward[horizon$ID == horizon$ID[x]&
horizon$block == horizon$block[x] &
horizon$chosen == 0 &
horizon$trial < 5]))
horizon$mean_R[horizon$trial == 5] <- apply(as.array(horizon$row[horizon$trial == 5]), 1, function(x) meann(horizon$reward[horizon$ID == horizon$ID[x]&
horizon$block == horizon$block[x] &
horizon$chosen == 1&
horizon$trial < 5]))
## calculate deltas
horizon$delta_mean <- scale(horizon$mean_L - horizon$mean_R)
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
### remove the person that has no data
horizon <- subset(horizon,!is.na(info))
sam <- subset(sam, !is.na(chosen))
############### Horizon task ############
unique(horizon$Horizon)
unique(horizon$info)
horizon$Horizon <- ifelse(horizon$Horizon == 5, -0.5, 0.5)
horizon$info <- horizon$info/2
res_list <- recovery_horizon(horizon, "UCB", bayesian = T, full = T, it = 8000, no_horizon = F, no_intercept = F, save = T, use_saved = T) # this should save the output as .Rda as well
res_list
plot(horizon$V, horizon$delta_mean)
cor(horizon$V, horizon$delta_mean)
cor(horizon$V, horizon$delta_mean, use = "pairwise.complete.obs")
plot(horizon$RU, horizon$info)
ggplot(horizon[horizon$trial == 5, ], aes(V, delta_mean)) + geom_jitter(alpha = 0.3)+
geom_smooth(method = "lm")+
coord_cartesian(xlim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)),
ylim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)))+
geom_label(label = sprintf("r = %.2f", cor(vars(V), vars(delta_mean))), x = Inf, y = -Inf, hjust = "inward")
geom_label(label = sprintf("r = %.2f", cor(horizon$V[horizon$trial == 5], horizon$delta_mean[horizon$trial == 5]), x = Inf, y = -Inf, hjust = "inward")
)
ggplot(horizon[horizon$trial == 5, ], aes(V, delta_mean)) + geom_jitter(alpha = 0.3)+
geom_smooth(method = "lm")+
coord_cartesian(xlim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)),
ylim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)))+
geom_label(label = sprintf("r = %.2f", cor(horizon$V[horizon$trial == 5], horizon$delta_mean[horizon$trial == 5])), x = Inf, y = -Inf, hjust = "inward")
View(horizon)
ggplot(horizon[horizon$trial == 5, ], aes(V, delta_mean)) + geom_jitter(alpha = 0.3)+
geom_smooth(method = "lm")+
#coord_cartesian(xlim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)),
# ylim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)))+
geom_label(label = sprintf("r = %.2f", cor(horizon$V[horizon$trial == 5], horizon$delta_mean[horizon$trial == 5])), x = Inf, y = -Inf, hjust = "inward", vjust = "inward")
ggplot(horizon[horizon$trial == 5, ], aes(V, delta_mean)) + geom_jitter(alpha = 0.3)+
geom_smooth(method = "lm")+
#coord_cartesian(xlim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)),
# ylim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)))+
geom_label(label = sprintf("r = %.2f", cor(horizon$V[horizon$trial == 5], horizon$delta_mean[horizon$trial == 5])), x = Inf, y = -Inf, hjust = "inward", vjust = "inward")+
labs(title = "Difference in posterior means (V) compared to simple mean differece",
x = "V",
y = "mean difference")
ggplot(horizon[horizon$trial == 5, ], aes(info, RU)) +
geom_boxplot()+
geom_violin()+
#geom_jitter(alpha = 0.3)+
geom_smooth(method = "lm")+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_boxplot()+
geom_violin()+
#geom_jitter(alpha = 0.3)+
#geom_smooth(method = "lm")+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_violin(width = 1.1)+
geom_boxplot(width = 0.2)+
#geom_jitter(alpha = 0.3)+
#geom_smooth(method = "lm")+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_violin(width = 1.5)+
geom_boxplot(width = 0.2)+
#geom_jitter(alpha = 0.3)+
#geom_smooth(method = "lm")+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
#geom_violin(width = 1.5)+
geom_boxplot(width = 0.2)+
#geom_jitter(alpha = 0.3)+
#geom_smooth(method = "lm")+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_boxplot(width = 0.2)+
scale_x_discrete(levels = c(-0.5, 0, 0.5), labels = c(-1, 0, 1))
ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_boxplot(width = 0.2)+
scale_x_discrete(breaks = c(-0.5, 0, 0.5), labels = c(-1, 0, 1))
ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_boxplot(width = 0.2)+
scale_x_discrete(breaks = c(-0.5, 0, 0.5), labels = c(-1, 0, 1))+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggarrange(p1, p2, labels = "AUTO")
p1 <- ggplot(horizon[horizon$trial == 5, ], aes(V, delta_mean)) + geom_jitter(alpha = 0.3)+
geom_smooth(method = "lm")+
#coord_cartesian(xlim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)),
# ylim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)))+
geom_label(label = sprintf("r = %.2f", cor(horizon$V[horizon$trial == 5], horizon$delta_mean[horizon$trial == 5])), x = Inf, y = -Inf, hjust = "inward", vjust = "inward")+
labs(title = "Difference in posterior means (V) compared to simple mean differece",
x = "V",
y = "mean difference")
p2 <- ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_boxplot(width = 0.2)+
scale_x_discrete(breaks = c(-0.5, 0, 0.5), labels = c(-1, 0, 1))+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggpubr::ggarrange(p1, p2, labels = "AUTO")
p1 <- ggplot(horizon[horizon$trial == 5, ], aes(delta_mean, V)) + geom_jitter(alpha = 0.3)+
geom_smooth(method = "lm")+
#coord_cartesian(xlim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)),
# ylim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)))+
geom_label(label = sprintf("r = %.2f", cor(horizon$V[horizon$trial == 5], horizon$delta_mean[horizon$trial == 5])), x = Inf, y = -Inf, hjust = "inward", vjust = "inward")+
labs(title = "Difference in posterior means (V) by mean difference",
x = "mean difference",
y = "V")
p2 <- ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_boxplot(width = 0.2)+
scale_x_discrete(breaks = c(-0.5, 0, 0.5), labels = c(-1, 0, 1))+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggpubr::ggarrange(p1, p2, labels = "AUTO")
out <- fit_model_horizon(horizon[horizon$Horizon == -0.5, ], model = "Wilson", bayesian = T, full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
out <- fit_model_horizon(horizon[horizon$Horizon == -0.5, ], model = "Wilson", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
out <- fit_model_horizon(horizon[horizon$Horizon == -0.5, ], model = "Wilson", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
wilson_5 <- out[[1]]
wilson_5
waic_wilson_5 <- add_criterion(wilson_5, "waic")
waic_wilson_5 <- add_criterion(wilson_5, "loo")
wilson_5 <- add_criterion(wilson_5, "loo", moment_match = T)
wilson_5 <- add_criterion(wilson_5, "loo")
wilson_5
wilson_5$criteria
out <- fit_model_horizon(horizon[horizon$Horizon == 0.5, ], model = "Wilson", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
wilson_10 <- out[[1]]
wilson_10 <- add_criterion(wilson_10, "loo")
wilson_10$criteria
modelFits <- data.frame(model = rep(c("Wilson", "UCB"), each = 2),
horizon = rep(c(5,10), 2),
loo = NA)
wilson_5$criteria$loo$estimates
wilson_5$criteria$loo$estimates[3,1]
modelFits$loo[modelFits$model == "Wilson" & modelFits$horizon == 5] <- wilson_5$criteria$loo$estimates[3,1]
modelFits[modelFits$model == "Wilson" & modelFits$horizon == 5, c(3,4)] <- wilson_5$criteria$loo$estimates[3, ]
modelFits[modelFits$model == "Wilson" & modelFits$horizon == 10, c(3,4)] <- wilson_10$criteria$loo$estimates[3, ]
View(modelFits)
out <- fit_model_horizon(horizon[horizon$Horizon == -0.5, ], model = "Wilson", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
wilson_5 <- out[[1]]
wilson_5 <- add_criterion(wilson_5, "loo")
wilson_5$criteria
modelFits <- data.frame(model = rep(c("Wilson", "UCB"), each = 2),
horizon = rep(c(5,10), 2),
loo = NA,
se = NA)
modelFits[modelFits$model == "Wilson" & modelFits$horizon == 5, c(3,4)] <- wilson_5$criteria$loo$estimates[3, ]
out <- fit_model_horizon(horizon[horizon$Horizon == 0.5, ], model = "Wilson", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
wilson_10 <- out[[1]]
wilson_10 <- add_criterion(wilson_10, "loo")
wilson_10$criteria
modelFits[modelFits$model == "Wilson" & modelFits$horizon == 10, c(3,4)] <- wilson_10$criteria$loo$estimates[3, ]
# model fit of UCB
out <- fit_model_horizon(horizon[horizon$Horizon == -0.5, ], model = "UCB", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
ucb_5 <- add_criterion(out[[1]], "loo")
ucb_5$criteria
modelFits[modelFits$model == "UCB" & modelFits$horizon == 5, c(3,4)] <- ucb_5$criteria$loo$estimates[3, ]
out <- fit_model_horizon(horizon[horizon$Horizon == 0.5, ], model = "UCB", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
ucb_10 <- add_criterion(out[[1]], "loo")
ucb_10$criteria
modelFits[modelFits$model == "UCB" & modelFits$horizon == 10, c(3,4)] <- ucb_10$criteria$loo$estimates[3, ]
modelFits$horizon <- factor(modelFits$horizon, levels = c(5, 10), labels = c("short", "long"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3)+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = "dodge")+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = "dodge2")+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(horizon, loo, fill = model)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = "dodge2")+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = "dodge2")+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = position_dodge(0.4))+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = position_dodge(1))+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = position_dodge(0.7))+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = position_dodge(0.8))+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = position_dodge(0.9))+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"))
ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = position_dodge(0.9))+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"), name = "Horizon")+
labs(title = "Model comparison",
subtitle = "UCB and the classic Wilson model do not differ in their model fit",
y = "Leave one out information criterion")
p3 <- ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = position_dodge(0.9))+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"), name = "Horizon")+
labs(title = "Model comparison",
subtitle = "UCB and the classic Wilson model do not differ in their model fit",
y = "Leave one out information criterion")
ggpubr::ggarrange(p1, p2, p3, labels = "AUTO")
ggpubr::ggarrange(p1, p2, p3,cols = 3, labels = "AUTO")
?ggpubr::ggarrange()
ggpubr::ggarrange(p1, p2, p3, ncol = 3, labels = "AUTO")
rm(list = ls())
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
session <- 1
load(paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
if (!is.element("KLM0", colnames(sam))) {
sam <- get_KL_into_df(sam)
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
if (!is.element("bayMeanL", colnames(horizon))) {
horizon$bayMeanL <- NA
horizon$bayMeanR <- NA
horizon$bayVarL <- NA
horizon$bayVarR <- NA
horizon$row <- 1:nrow(horizon)
for (i in horizon$row[horizon$trial == 5]){
horizon[horizon$row == i, grep("bay", colnames(horizon))] <- bayIncrAtOnce(i, horizon)
}
horizon$V <- scale(getV(horizon$bayMeanL, horizon$bayMeanR))
horizon$RU <- scale(getRU(horizon$bayVarL, horizon$bayVarR))
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
if (!is.element("delta_mean", colnames(horizon))){
horizon$mean_L <- NA
horizon$mean_R <- NA
horizon$row <- 1:nrow(horizon)
horizon$mean_L[horizon$trial == 5] <- apply(as.array(horizon$row[horizon$trial == 5]), 1, function(x) meann(horizon$reward[horizon$ID == horizon$ID[x]&
horizon$block == horizon$block[x] &
horizon$chosen == 0 &
horizon$trial < 5]))
horizon$mean_R[horizon$trial == 5] <- apply(as.array(horizon$row[horizon$trial == 5]), 1, function(x) meann(horizon$reward[horizon$ID == horizon$ID[x]&
horizon$block == horizon$block[x] &
horizon$chosen == 1&
horizon$trial < 5]))
## calculate deltas
horizon$delta_mean <- scale(horizon$mean_L - horizon$mean_R)
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
### remove the person that has no data
horizon <- subset(horizon,!is.na(info))
sam <- subset(sam, !is.na(chosen))
############### Horizon task ############
unique(horizon$Horizon)
unique(horizon$info)
horizon$Horizon <- ifelse(horizon$Horizon == 5, -0.5, 0.5)
horizon$info <- horizon$info/2
p1 <- ggplot(horizon[horizon$trial == 5, ], aes(delta_mean, V)) + geom_jitter(alpha = 0.3)+
geom_smooth(method = "lm")+
#coord_cartesian(xlim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)),
# ylim = c(min(c(horizon$V, horizon$delta_mean), na.rm = T), min(c(horizon$V, horizon$delta_mean), na.rm = T)))+
geom_label(label = sprintf("r = %.2f", cor(horizon$V[horizon$trial == 5], horizon$delta_mean[horizon$trial == 5])), x = Inf, y = -Inf, hjust = "inward", vjust = "inward")+
labs(title = "Difference in posterior means (V) by mean difference",
x = "mean difference",
y = "V")
p2 <- ggplot(horizon[horizon$trial == 5, ], aes(as.factor(info), RU)) +
geom_boxplot(width = 0.2)+
scale_x_discrete(breaks = c(-0.5, 0, 0.5), labels = c(-1, 0, 1))+
labs(title = "Difference in posterior variance (RU) by information condition",
x = "information condition",
y = "RU")
ggpubr::ggarrange(p1, p2, labels = "AUTO")
out <- fit_model_horizon(horizon[horizon$Horizon == -0.5, ], model = "Wilson", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
wilson_5 <- out[[1]]
wilson_5 <- add_criterion(wilson_5, "loo")
wilson_5$criteria
modelFits <- data.frame(model = rep(c("Wilson", "UCB"), each = 2),
horizon = rep(c(5,10), 2),
loo = NA,
se = NA)
modelFits[modelFits$model == "Wilson" & modelFits$horizon == 5, c(3,4)] <- wilson_5$criteria$loo$estimates[3, ]
out <- fit_model_horizon(horizon[horizon$Horizon == 0.5, ], model = "Wilson", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
wilson_10 <- out[[1]]
wilson_10 <- add_criterion(wilson_10, "loo")
wilson_10$criteria
modelFits[modelFits$model == "Wilson" & modelFits$horizon == 10, c(3,4)] <- wilson_10$criteria$loo$estimates[3, ]
# model fit of UCB
out <- fit_model_horizon(horizon[horizon$Horizon == -0.5, ], model = "UCB", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
ucb_5 <- add_criterion(out[[1]], "loo")
ucb_5$criteria
modelFits[modelFits$model == "UCB" & modelFits$horizon == 5, c(3,4)] <- ucb_5$criteria$loo$estimates[3, ]
out <- fit_model_horizon(horizon[horizon$Horizon == 0.5, ], model = "UCB", full = T, it = 8000, no_intercept = F, no_horizon = T, save = T, use_saved = T)
ucb_10 <- add_criterion(out[[1]], "loo")
ucb_10$criteria
modelFits[modelFits$model == "UCB" & modelFits$horizon == 10, c(3,4)] <- ucb_10$criteria$loo$estimates[3, ]
modelFits$horizon <- factor(modelFits$horizon, levels = c(5, 10), labels = c("short", "long"))
p3 <- ggplot(modelFits, aes(model, loo, fill = horizon)) +
geom_col(position = "dodge")+
geom_errorbar(aes(ymin = loo -se, ymax = loo+se), width = 0.3, position = position_dodge(0.9))+
scale_fill_manual(values = c("#66C2A5", "#FC8D62"), name = "Horizon")+
labs(title = "Model comparison",
subtitle = "UCB and the classic Wilson model do not differ in their model fit",
y = "Leave one out information criterion")
p3
ggpubr::ggarrange(p1, p2, p3, ncol = 3, labels = "AUTO")
simdat <- subset(horizon, trial == 5, -chosen)

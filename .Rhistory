simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simParams$V[simParams$ID == i] <- simModel$coefficients[2]
simParams$RU[simParams$ID == i] <- simModel$coefficients[4]
simParams$Horizon[simParams$ID == i] <- simModel$coefficients[3]
simParams$VH[simParams$ID == i] <- simModel$coefficients[5]
simParams$RUH[simParams$ID == i] <- simModel$coefficients[6]
simParams$converged[simParams$ID == i] <- simModel$converged
}
trueParams <- res_list[[1]]
trueParams <- subset(trueParams, V > mean(V)-1*sd(V) &  V < mean(V)+1*sd(V))
column_names <- colnames(trueParams)
column_names <- column_names[!grepl("onverged", column_names)]
# Create an empty data frame with specific column names
bootstrappedParams <- data.frame(matrix(nrow = N, ncol = length(column_names)))
colnames(bootstrappedParams) <- column_names
bootstrappedParams$ID <- 1:N
simParams <- bootstrappedParams
for (i in 2:length(column_names)){
bootstrappedParams[ ,i] <- rnorm(N, mean = mean(trueParams[ ,colnames(trueParams)== column_names[i]]), sd = sd(trueParams[ ,colnames(trueParams)== column_names[i]]) )
}
if (model == "UCB" & task == "Horizon"){
data$bayMeanL <- NA
data$bayMeanR <- NA
data$bayVarL <- NA
data$bayVarR <- NA
data$row <- 1:nrow(data)
for (i in data$row[data$trial == 5]){
data[data$row == i, grep("bay", colnames(data))] <- bayIncrAtOnce(i, data)
}
data$V <- scale(getV(data$bayMeanL, data$bayMeanR))
data$RU <- scale(getRU(data$bayVarL, data$bayVarR))
# generate a glm model object to then replace the parameter estimates in with the estimates we bootstrapped
trueModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
for (i in bootstrappedParams$ID){
# enter coefficients into model
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simParams$V[simParams$ID == i] <- simModel$coefficients[2]
simParams$RU[simParams$ID == i] <- simModel$coefficients[4]
simParams$Horizon[simParams$ID == i] <- simModel$coefficients[3]
simParams$VH[simParams$ID == i] <- simModel$coefficients[5]
simParams$RUH[simParams$ID == i] <- simModel$coefficients[6]
simParams$converged[simParams$ID == i] <- simModel$converged
}
}
data$bayMeanL <- NA
data$bayMeanR <- NA
data$bayVarL <- NA
data$bayVarR <- NA
data$row <- 1:nrow(data)
for (i in data$row[data$trial == 5]){
data[data$row == i, grep("bay", colnames(data))] <- bayIncrAtOnce(i, data)
}
data$V <- scale(getV(data$bayMeanL, data$bayMeanR))
data$RU <- scale(getRU(data$bayVarL, data$bayVarR))
# generate a glm model object to then replace the parameter estimates in with the estimates we bootstrapped
trueModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
for (i in bootstrappedParams$ID){
# enter coefficients into model
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simParams$V[simParams$ID == i] <- simModel$coefficients[2]
simParams$RU[simParams$ID == i] <- simModel$coefficients[4]
simParams$Horizon[simParams$ID == i] <- simModel$coefficients[3]
simParams$VH[simParams$ID == i] <- simModel$coefficients[5]
simParams$RUH[simParams$ID == i] <- simModel$coefficients[6]
simParams$converged[simParams$ID == i] <- simModel$converged
}
# get correlations
cors <- data.frame(true = rep(c("RU", "V", "Horizon", "RUH", "VH"), 5),
recovered =  rep(c("RU", "V", "Horizon", "RUH", "VH"), each = 5),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(bootstrappedParams[simParams$converged,grep(cors$true[x], colnames(bootstrappedParams))[1]],# converged rows, cols with correct variable name (first instance)
simParams[simParams$converged, grep(cors$recovered[x], colnames(simParams))[1]]))
recoveredParams <- simParams
}
ggplot(cors, aes(x = true, y = recovered, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2)))
data$bayMeanL <- NA
data$bayMeanR <- NA
data$bayVarL <- NA
data$bayVarR <- NA
data$row <- 1:nrow(data)
for (i in data$row[data$trial == 5]){
data[data$row == i, grep("bay", colnames(data))] <- bayIncrAtOnce(i, data)
}
data$V <- getV(data$bayMeanL, data$bayMeanR)
data$RU <- getRU(data$bayVarL, data$bayVarR)
# generate a glm model object to then replace the parameter estimates in with the estimates we bootstrapped
trueModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
for (i in bootstrappedParams$ID){
# enter coefficients into model
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simParams$V[simParams$ID == i] <- simModel$coefficients[2]
simParams$RU[simParams$ID == i] <- simModel$coefficients[4]
simParams$Horizon[simParams$ID == i] <- simModel$coefficients[3]
simParams$VH[simParams$ID == i] <- simModel$coefficients[5]
simParams$RUH[simParams$ID == i] <- simModel$coefficients[6]
simParams$converged[simParams$ID == i] <- simModel$converged
}
# get correlations
cors <- data.frame(true = rep(c("RU", "V", "Horizon", "RUH", "VH"), 5),
recovered =  rep(c("RU", "V", "Horizon", "RUH", "VH"), each = 5),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(bootstrappedParams[simParams$converged,grep(cors$true[x], colnames(bootstrappedParams))[1]],# converged rows, cols with correct variable name (first instance)
simParams[simParams$converged, grep(cors$recovered[x], colnames(simParams))[1]]))
recoveredParams <- simParams
ggplot(cors, aes(x = true, y = recovered, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2)))
bootstrappedParams$Horizon[i]
bootstrappedParams$RU[i]
bootstrappedParams$V[i]
trueModel
data <- horizon
data$bayMeanL <- NA
data$bayMeanR <- NA
data$bayVarL <- NA
data$bayVarR <- NA
data$row <- 1:nrow(data)
for (i in data$row[data$trial == 5]){
data[data$row == i, grep("bay", colnames(data))] <- bayIncrAtOnce(i, data)
}
data$V <- scale(getV(data$bayMeanL, data$bayMeanR))
data$RU <- scale(getRU(data$bayVarL, data$bayVarR))
# generate a glm model object to then replace the parameter estimates in with the estimates we bootstrapped
trueModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
trueModel
data$bayMeanL <- NA
data$bayMeanR <- NA
data$bayVarL <- NA
data$bayVarR <- NA
data$row <- 1:nrow(data)
for (i in data$row[data$trial == 5]){
data[data$row == i, grep("bay", colnames(data))] <- bayIncrAtOnce(i, data)
}
data$V <- getV(data$bayMeanL, data$bayMeanR)
data$RU <- getRU(data$bayVarL, data$bayVarR)
# generate a glm model object to then replace the parameter estimates in with the estimates we bootstrapped
trueModel <- glm(chosen ~ scale(V)*Horizon + scale(RU)*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
trueModel
View(data)
# generate a glm model object to then replace the parameter estimates in with the estimates we bootstrapped
trueModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
trueModel
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
trueModel
for (i in 2:length(column_names)){
bootstrappedParams[ ,i] <- rnorm(N, mean = mean(trueParams[ ,colnames(trueParams)== column_names[i]]), sd = sd(trueParams[ ,colnames(trueParams)== column_names[i]]) )
}
# enter coefficients into model
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
trueModel
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simModel
# List of column names
column_names <- colnames(trueParams)
column_names <- column_names[!grepl("onverged", column_names)]
# Create an empty data frame with specific column names
bootstrappedParams <- data.frame(matrix(nrow = N, ncol = length(column_names)))
colnames(bootstrappedParams) <- column_names
bootstrappedParams$ID <- 1:N
simParams <- bootstrappedParams
for (i in 2:length(column_names)){
bootstrappedParams[ ,i] <- rnorm(N, mean = mean(trueParams[ ,colnames(trueParams)== column_names[i]]), sd = sd(trueParams[ ,colnames(trueParams)== column_names[i]]) )
}
data$bayMeanL <- NA
data$bayMeanR <- NA
data$bayVarL <- NA
data$bayVarR <- NA
data$row <- 1:nrow(data)
for (i in data$row[data$trial == 5]){
data[data$row == i, grep("bay", colnames(data))] <- bayIncrAtOnce(i, data)
}
data$V <- getV(data$bayMeanL, data$bayMeanR)
data$RU <- getRU(data$bayVarL, data$bayVarR)
# generate a glm model object to then replace the parameter estimates in with the estimates we bootstrapped
trueModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
for (i in bootstrappedParams$ID){
# enter coefficients into model
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simParams$V[simParams$ID == i] <- simModel$coefficients[2]
simParams$RU[simParams$ID == i] <- simModel$coefficients[4]
simParams$Horizon[simParams$ID == i] <- simModel$coefficients[3]
simParams$VH[simParams$ID == i] <- simModel$coefficients[5]
simParams$RUH[simParams$ID == i] <- simModel$coefficients[6]
simParams$converged[simParams$ID == i] <- simModel$converged
}
# get correlations
cors <- data.frame(true = rep(c("RU", "V", "Horizon", "RUH", "VH"), 5),
recovered =  rep(c("RU", "V", "Horizon", "RUH", "VH"), each = 5),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(bootstrappedParams[simParams$converged,grep(cors$true[x], colnames(bootstrappedParams))[1]],# converged rows, cols with correct variable name (first instance)
simParams[simParams$converged, grep(cors$recovered[x], colnames(simParams))[1]]))
recoveredParams <- simParams
ggplot(cors, aes(x = true, y = recovered, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2)))
View(simdat)
i = 4
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
trueModel
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simModel
i = 5
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
trueModel
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simModel
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
head(simdat)
i = 4
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
head(simdat)
trueModel
i = 5
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
trueModel
head(simdat)
sim1 <- simdat$chosen
i = 4
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
sim2 <- simdat$chosen
table(sim1 == sim2)
simdat <- data.frame(trial = 1:80)
# generate a glm model object to then replace the parameter estimates in with the estimates we bootstrapped
trueModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
choices <- data.frame(trial = 1:80)
for (i in bootstrappedParams$ID){
# enter coefficients into model
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
sim <- data.frame(chosen = simdat$chosen)
choices <- cbind(choices, sim)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simParams$V[simParams$ID == i] <- simModel$coefficients[2]
simParams$RU[simParams$ID == i] <- simModel$coefficients[4]
simParams$Horizon[simParams$ID == i] <- simModel$coefficients[3]
simParams$VH[simParams$ID == i] <- simModel$coefficients[5]
simParams$RUH[simParams$ID == i] <- simModel$coefficients[6]
simParams$converged[simParams$ID == i] <- simModel$converged
}
View(choices)
choices$overall <- colMeans(choices[ ,2:201])
choices$overall <- rowMeans(choices[ ,2:201])
table(choices$overall > 0 & choices$overall < 1)
trueModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = data[data$trial ==5 & data$ID == 1, ],
family = binomial(link = "probit"))
choices <- data.frame(trial = 1:80)
for (i in bootstrappedParams$ID){
# enter coefficients into model
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- predict(trueModel, type = "response")
#simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
sim <- data.frame(chosen = simdat$chosen)
choices <- cbind(choices, sim)
# simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
#                 data = simdat,
#                 family = binomial(link = "probit"))
#
#
# simParams$V[simParams$ID == i] <- simModel$coefficients[2]
# simParams$RU[simParams$ID == i] <- simModel$coefficients[4]
# simParams$Horizon[simParams$ID == i] <- simModel$coefficients[3]
# simParams$VH[simParams$ID == i] <- simModel$coefficients[5]
# simParams$RUH[simParams$ID == i] <- simModel$coefficients[6]
# simParams$converged[simParams$ID == i] <- simModel$converged
}
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- bootstrappedParams$V[i] * simdat$V + bootstrappedParams$RU[i] * simdat$RU + bootstrappedParams$Horizon[i] * simdat$Horizon +
bootstrappedParams$VH[i] * (simdat$V * simdat$Horizon) + bootstrappedParams$RUH[i] * (simdat$RU * simdat$Horizon) # setting intercept to 0 bc used scaled params so should approximately be ok
View(simdat)
data$bayMeanL <- NA
data$bayMeanR <- NA
data$bayVarL <- NA
data$bayVarR <- NA
data$row <- 1:nrow(data)
for (i in data$row[data$trial == 5]){
data[data$row == i, grep("bay", colnames(data))] <- bayIncrAtOnce(i, data)
}
data$V <- scale(getV(data$bayMeanL, data$bayMeanR))
data$RU <- scale(getRU(data$bayVarL, data$bayVarR))
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- bootstrappedParams$V[i] * simdat$V + bootstrappedParams$RU[i] * simdat$RU + bootstrappedParams$Horizon[i] * simdat$Horizon +
bootstrappedParams$VH[i] * (simdat$V * simdat$Horizon) + bootstrappedParams$RUH[i] * (simdat$RU * simdat$Horizon) # setting intercept to 0 bc used scaled params so should approximately be ok
bootstrappedParams$V[i] * simdat$V
i = 1
simdat$chosen <- bootstrappedParams$V[i] * simdat$V + bootstrappedParams$RU[i] * simdat$RU + bootstrappedParams$Horizon[i] * simdat$Horizon +
bootstrappedParams$VH[i] * (simdat$V * simdat$Horizon) + bootstrappedParams$RUH[i] * (simdat$RU * simdat$Horizon) # setting intercept to 0 bc used scaled params so should approximately be ok
hist(simdat$chosen)
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
data$bayMeanL <- NA
data$bayMeanR <- NA
data$bayVarL <- NA
data$bayVarR <- NA
data$row <- 1:nrow(data)
for (i in data$row[data$trial == 5]){
data[data$row == i, grep("bay", colnames(data))] <- bayIncrAtOnce(i, data)
}
data$V <- scale(getV(data$bayMeanL, data$bayMeanR))
data$RU <- scale(getRU(data$bayVarL, data$bayVarR))
choices <- data.frame(trial = 1:80)
for (i in bootstrappedParams$ID){
# enter coefficients into model
trueModel$coefficients[2] <- bootstrappedParams$V[i]
trueModel$coefficients[4] <- bootstrappedParams$RU[i]
trueModel$coefficients[3] <- bootstrappedParams$Horizon[i]
trueModel$coefficients[5] <- bootstrappedParams$VH[i]
trueModel$coefficients[6] <- bootstrappedParams$RUH[i]
# simulate data
simdat <- subset(data, trial == 5 & ID == 1, -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat$chosen <- bootstrappedParams$V[i] * simdat$V + bootstrappedParams$RU[i] * simdat$RU + bootstrappedParams$Horizon[i] * simdat$Horizon +
bootstrappedParams$VH[i] * (simdat$V * simdat$Horizon) + bootstrappedParams$RUH[i] * (simdat$RU * simdat$Horizon) # setting intercept to 0 bc used scaled params so should approximately be ok
simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
sim <- data.frame(chosen = simdat$chosen)
choices <- cbind(choices, sim)
simModel <- glm(chosen ~ V*Horizon + RU*Horizon ,
data = simdat,
family = binomial(link = "probit"))
simParams$V[simParams$ID == i] <- simModel$coefficients[2]
simParams$RU[simParams$ID == i] <- simModel$coefficients[4]
simParams$Horizon[simParams$ID == i] <- simModel$coefficients[3]
simParams$VH[simParams$ID == i] <- simModel$coefficients[5]
simParams$RUH[simParams$ID == i] <- simModel$coefficients[6]
simParams$converged[simParams$ID == i] <- simModel$converged
}
# get correlations
cors <- data.frame(true = rep(c("RU", "V", "Horizon", "RUH", "VH"), 5),
recovered =  rep(c("RU", "V", "Horizon", "RUH", "VH"), each = 5),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(bootstrappedParams[simParams$converged,grep(cors$true[x], colnames(bootstrappedParams))[1]],# converged rows, cols with correct variable name (first instance)
simParams[simParams$converged, grep(cors$recovered[x], colnames(simParams))[1]]))
recoveredParams <- simParams
ggplot(cors, aes(x = true, y = recovered, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2)))
source("analysis/recovery_utils.R")
# desired N
N <- 200
########### Horizon task + UCB non-bayesian implementation
res_list <- recovery_horizon(horizon, "UCB", bayesian = F)
trueParams <- res_list[[1]]
trueParams <- subset(trueParams, V > mean(V)-1*sd(V) &  V < mean(V)+1*sd(V))
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
source("analysis/recovery_utils.R")
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
bootParams <- res_list2[[1]]
View(bootstrappedParams)
View(bootParams)
source("analysis/recovery_utils.R")
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
bootParams <- res_list2[[1]]
res_list2 <- recover_bootstrapped_estimates_glm(N = N, trueParams = trueParams, model = "UCB", task = "Horizon", data = horizon)
res_list2
bootParams <- res_list2[[1]]
View(bootParams)
cor(bootParams[ ,2:6])
View(sam)

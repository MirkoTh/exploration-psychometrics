48 , 49,  52  ,55 , 56,  59 , 60 , 61 , 63 , 65 , 69 , 71,
72 , 73 , 74 , 76 , 77 , 78,  79 , 83  ,84  ,85 , 90 , 93,  94 ,
95,  96 , 97,  98  ,99 ,100, 101 ,102 ,103 ,105 ,108 ,109, 110,
113 ,114, 117, 118, 119, 120, 122, 123, 124, 125, 128 ,129, 131, 132,
133, 134, 135, 137, 142, 149 ,151, 154, 162, 163, 165, 166, 168 ,169,
170 ,171 ,172, 175 ,176, 180 ,182 ,183, 185, 187 ,188 ,190, 193 ,195,
197, 198 ,199, 200 ,202 ,203, 204, 205, 206, 207, 208, 209,
213 ,216 ,219, 220, 222, 229 ,232, 233, 239, 243, 244, 245, 246 ,251,
254, 261 ,262, 269, 270, 271, 273, 274 ,276 ,279, 284, 288, 290 ,291,
294 ,297, 298 ,299 ,302 ,303 ,306, 308, 309, 313, 316, 317,
320, 322, 323, 324, 325, 326, 332, 333, 338 ,343, 346, 347, 349, 351, 352)) %>%
left_join(read.csv("analysis/CFA_compound_questionnaire_factors_s2.csv") %>% select(-X), by = "ID") %>%
self_cor() %>%
mutate(x = factor(x, levels = c("G.Value.Guided", "G.Directed","WMC",  "Exp", "posMood", "negMood", "AxDep"),
labels = c("Value-guided", "Directed","Working memory", "Self-reported exploration","Positive mood", "Negative mood", "Anxiety/depression")),
y = factor(y, levels = c("AxDep", "negMood","posMood", "Exp","WMC", "G.Directed", "G.Value.Guided"),
labels = c("Anxiety/depression","Negative mood","Positive", "Self-reported exploration","Working memory", "Directed", "Value-guided")))
latent <- heatmap(cors) +
labs(title = "External validity on the latent level",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_hline(yintercept = 4.5, color = "white", size = 3)+
geom_vline(xintercept = 3.5, color = "white", size = 3)
latent
brm(G.Value.Guided ~ WMC * AnxDep# 1 datapoint per participant so no random intercepts or slopes
df,
brm(G.Value.Guided ~ WMC * AnxDep, # 1 datapoint per participant so no random intercepts or slopes
df,
cores = 2,
chains = 2,
iter = 4000,
control = list(adapt_delta = 0.9))
brm(G.Value.Guided ~ WMC * AxDep, # 1 datapoint per participant so no random intercepts or slopes
df,
cores = 2,
chains = 2,
iter = 4000,
control = list(adapt_delta = 0.9))
brm(G.Value.Guided ~ AxDep, # 1 datapoint per participant so no random intercepts or slopes
df,
cores = 2,
chains = 2,
iter = 4000,
control = list(adapt_delta = 0.9))
brm(G.Value.Guided ~ WMC * AxDep, # 1 datapoint per participant so no random intercepts or slopes
df,
cores = 2,
chains = 2,
iter = 4000,
control = list(adapt_delta = 0.9))
brm(G.Directed ~ WMC * AxDep, # 1 datapoint per participant so no random intercepts or slopes
df,
cores = 2,
chains = 2,
iter = 4000,
control = list(adapt_delta = 0.9))
############### Horizon task ############
horizon <- load_and_prep_bandit_data(session)$horizon
?bayes_factor
# get bayes factor for main effect of axdep
m2 <- brm(G.Value.Guided ~ WMC : AxDep + WMC, # 1 datapoint per participant so no random intercepts or slopes
df,
cores = 2,
chains = 2,
iter = 4000,
control = list(adapt_delta = 0.9))
m1 <- brm(G.Value.Guided ~ WMC * AxDep, # 1 datapoint per participant so no random intercepts or slopes
df,
cores = 2,
chains = 2,
iter = 4000,
control = list(adapt_delta = 0.9))
m1
bayes_factor(m1, m2)
m2
fixed <- readRDS("analysis/bandits/allFixed.rds") %>%
mutate(predictor = recode(predictor, "delta_mean" = "Value-guided",
"info" = "Directed",
"V" = "Value-guided",
"RU" = "Directed",
"VTU" = "Random"),
task = recode(task, "sam" = "Two-armed", "horizon" = "Horizon", "restless" = "Restless"),
session = recode(session, `1` = "Session 1", `2` = "Session 2"))  %>%
subset(!grepl("ntercept", predictor))
fixed$predictor <- factor(fixed$predictor, levels = c("Value-guided", "Directed", "Random"))
fixed$task <- factor(fixed$task, levels = c("Horizon", "Two-armed", "Restless"))
rep <- ggplot(fixed, aes(predictor, Estimate,fill = predictor)) + geom_col()+
geom_errorbar(aes(ymin = `l-95% CI`, ymax = `u-95% CI`), width = 0.25)+
scale_fill_brewer(palette  = "Set2") +
facet_grid(rows = vars(task), cols =vars(session), scales = "free_x")+
theme(legend.position = "none",
strip.background = element_rect(fill = "white"),
axis.text.x = element_text(angle = 25, hjust = 1)) +
labs(title = "Group-level effects across tasks and sessions",
x = element_blank(),
y = "Parameter estimate Â± 95% HDI")+
geom_hline(yintercept = 0, linetype = "dotdash")
rep
save_my_pdf_and_tiff_and_png(rep, str_c(my_dir, "/replicability_default"),
w = 6,
h = 5)
0.2*0.3+0.2*0.5*0.6*0.3
0.2*0.3+0.2*0.5+0.6*0.3
pog <- 0.3
pg <- 0.6
po <- 0.2*0.4+ 0.2 * 0.5 + 0.6*0.3
(pog * pg)/po
df <- read.csv("data/finalHorizonSession1.csv")
df2 <- read.csv("data/finalHorizonSession1.csv")
View(df2)
df2 <- read.csv("data/finalHorizonSession2.csv")
View(df)
View(df2)
length(unique(df$ID))
length(unique(df2$ID))
df <- subset(df, is.element(ID, df2$ID))
IDs <- intersect(unique(df$ID), unique(df2$ID))
df2 <- subset(df2, is.element(ID, IDs))
library(tidyverse)
exp <- list(df, df2) %>% bind_rows(.id = "Session")
View(exp)
df <- read.csv("data/final2ABSession1.csv")
write.csv(exp, "data/fullHorizon.csv")
df <- read.csv("data/final2armedBanditSession1.csv")
df2 <- read.csv("data/final2armedBanditSession2.csv")
exp <- list(df, df2) %>% bind_rows(.id = "Session") %>% subset(is.element(ID, IDs))
View(exp)
write.csv(exp, "data/full2AB.csv")
df <- read.csv("data/finalRestlessSession1.csv")
df2 <- read.csv("data/finalRestlessSession2.csv")
exp <- list(df, df2) %>% bind_rows(.id = "Session") %>% subset(is.element(ID, IDs))
write.csv("data/fullRestless.csv")
write.csv(exp, "data/fullRestless.csv")
load("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics/data/wave1/banditsWave1full.Rda")
View(horizon)
library(jsonlite)
tb <- fromJSON("task/orders.json")
View(tb)
tb <- as.data.frame(tb)
View(tb)
View(tb)
df <- data.frame(PID = tb[1, ], order = tb[2, ])
View(df)
View(tb)
View(df)
df <- data.frame(PID = as.array(tb[1, ]), order = tb[2, ])
df <- data.frame(PID = as.array(tb[1, ]), order = as.array(tb[2, ]))
tb <- fromJSON("task/orders.json")
tb[1, ]
df <- data.frame(PID = as.array(tb[1, ]), order = tb[2, ])
View(df)
lookup <- read.csv("data/FINALlookup.csv")
df$ID <- lookup$ID[match(df$PID, lookup$PID)]
View(df)
View(lookup)
df <- df %>% select(-PID)
write.csv(df, "data/orders.csv")
View(horizon)
############# external and convergent validity of bandit data #################
rm(list = ls())
library(plyr)
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
library(ggridges)
theme_set(theme_classic(base_size = 14))
library(here)
session <- 1
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
qdat <- read.csv(sprintf("data/finalQuestionnaireDataSession%i.csv", session))
qs <- read.csv("task/questionnaires.csv", sep = ";")
qs$Qnum <- NA
View(qs)
View(qs)
qs <- read.csv("task/questionnaires.csv", sep = ";")
qs$Q <- paste(qs$Measure, qs$num, sep = "_")
View(qs)
View(qdat)
responses <- pivot_longer(qdat, cols = is.element(colnames(qdat), qs$Q), names_to = "Q", values_to = "response")
load_and_prep_bandit_data <- function(session){
horizon <- read.csv(sprintf("data/finalHorizonSession%i.csv", session))
sam <- read.csv(sprintf("data/final2armedBanditSession%i.csv", session))
restless <- read.csv(sprintf("data/finalRestlessSession%i.csv", session))
if (!is.element("KLM0", colnames(sam))) {
sam <- get_KL_into_df(sam)
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
if (!is.element("bayMeanL", colnames(horizon))) {
horizon$bayMeanL <- NA
horizon$bayMeanR <- NA
horizon$bayVarL <- NA
horizon$bayVarR <- NA
horizon$row <- 1:nrow(horizon)
for (i in horizon$row[horizon$trial == 5]){
horizon[horizon$row == i, grep("bay", colnames(horizon))] <- bayIncrAtOnce(i, horizon)
}
horizon$V <- scale(getV(horizon$bayMeanL, horizon$bayMeanR))
horizon$RU <- scale(getRU(horizon$bayVarL, horizon$bayVarR))
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
if (!is.element("delta_mean", colnames(horizon))){
horizon$mean_L <- NA
horizon$mean_R <- NA
horizon$row <- 1:nrow(horizon)
horizon$mean_L[horizon$trial == 5] <- apply(as.array(horizon$row[horizon$trial == 5]), 1, function(x) meann(horizon$reward[horizon$ID == horizon$ID[x]&
horizon$block == horizon$block[x] &
horizon$chosen == 0 &
horizon$trial < 5]))
horizon$mean_R[horizon$trial == 5] <- apply(as.array(horizon$row[horizon$trial == 5]), 1, function(x) meann(horizon$reward[horizon$ID == horizon$ID[x]&
horizon$block == horizon$block[x] &
horizon$chosen == 1&
horizon$trial < 5]))
## calculate deltas
horizon$delta_mean <- scale(horizon$mean_L - horizon$mean_R)
save(horizon, sam, restless, file = paste("analysis/bandits/banditsWave", session, ".Rda", sep = ""))
}
### remove the person that has no data
horizon <- subset(horizon,!is.na(info))
sam <- subset(sam, !is.na(chosen))
print(unique(horizon$Horizon))
print(unique(horizon$info))
horizon$Horizon <- ifelse(horizon$Horizon == 5, -0.5, 0.5)
horizon$info <- horizon$info/2
return(list(horizon = horizon, sam = sam, restless = restless))
}
source("~/Documents/GitHub/exploration-psychometrics/analysis/recovery_utils.R", echo=TRUE)
############# external and convergent validity of bandit data #################
rm(list = ls())
library(plyr)
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
library(ggridges)
theme_set(theme_classic(base_size = 14))
library(here)
session <- 1
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
qdat <- read.csv(sprintf("data/finalQuestionnaireDataSession%i.csv", session))
qs <- read.csv("task/questionnaires.csv", sep = ";")
qs$Q <- paste(qs$Measure, qs$num, sep = "_")
is.element(colnames(qdat), qs$Q)
responses <- pivot_longer(qdat, cols = is.element(colnames(qdat), qs$Q), names_to = "Q", values_to = "response")
responses <- pivot_longer(qdat, cols = colnames(qdat)[is.element(colnames(qdat), qs$Q)], names_to = "Q", values_to = "response")
View(responses)
responses <- qdat %>%
pivot_longer(cols = colnames(qdat)[is.element(colnames(qdat), qs$Q)], names_to = "Q", values_to = "response") %>%
left_join(qs %>% select(Q, Attention.check, Reverse.coded), by = "Q")
View(responses)
View(responses)
responses <- qdat %>%
pivot_longer(cols = colnames(qdat)[is.element(colnames(qdat), qs$Q)], names_to = "Q", values_to = "response") %>%
select(ID, response, Q) %>%
left_join(qs %>% select(Q, Attention.check, Reverse.coded, sticsaSubscale, num), by = "Q")
View(responses)
responses <- qdat %>%
pivot_longer(cols = colnames(qdat)[is.element(colnames(qdat), qs$Q)], names_to = "Q", values_to = "response") %>%
select(ID, response, Q) %>%
left_join(qs %>% select(Q, Attention.check, Reverse.coded, sticsaSubscale, num), by = "Q") %>%
subset(Attention.check == 0)
View(responses)
# distinguish panas positive and negative
PANASpos <- c(1,3,5,9,10,12,14,16,17,19)
PANASneg <- c(2,4,6,7,8,11,13,15,18,20)
responses$Measure[grepl("PANAS", responses$Q) & is.element((responses$num+1), PANASpos)] <- "PANASpos"
responses$Measure[grepl("PANAS", responses$Q) & is.element((responses$num+1), PANASneg)] <- "PANASneg"
View(qs)
responses <- qdat %>%
pivot_longer(cols = colnames(qdat)[is.element(colnames(qdat), qs$Q)], names_to = "Q", values_to = "response") %>%
select(ID, response, Q) %>%
left_join(qs %>% select(Q, Attention.check, Reverse.coded, sticsaSubscale, num, Measure), by = "Q") %>%
subset(Attention.check == 0)
# distinguish panas positive and negative
PANASpos <- c(1,3,5,9,10,12,14,16,17,19)
PANASneg <- c(2,4,6,7,8,11,13,15,18,20)
responses$Measure[grepl("PANAS", responses$Q) & is.element((responses$num+1), PANASpos)] <- "PANASpos"
responses$Measure[grepl("PANAS", responses$Q) & is.element((responses$num+1), PANASneg)] <- "PANASneg"
responses$Measure[responses$sticsaSubscale == "c"] <- "STICSAcog"
responses$Measure[responses$sticsaSubscale == "s"] <- "STICSAsoma"
# reverse back reverse-coded items
maxval <- ddply(responses, ~measure, summarise, max = max(response) )
# reverse back reverse-coded items
maxval <- ddply(responses, ~Measure, summarise, max = max(response) )
responses$max <- maxval$max[match(responses$measure, maxval$measure)]
responses$max <- maxval$max[match(responses$Measure, maxval$Measure)]
responses$response <- ifelse(responses$reversed == 1, as.numeric(responses$max) - as.numeric(responses$response), as.numeric(responses$response))
responses <- qdat %>%
pivot_longer(cols = colnames(qdat)[is.element(colnames(qdat), qs$Q)], names_to = "Q", values_to = "response") %>%
select(ID, response, Q) %>%
left_join(qs %>% select(Q, Attention.check, Reverse.coded, sticsaSubscale, num, Measure), by = "Q") %>%
subset(Attention.check == 0)
# distinguish panas positive and negative
PANASpos <- c(1,3,5,9,10,12,14,16,17,19)
PANASneg <- c(2,4,6,7,8,11,13,15,18,20)
responses$Measure[grepl("PANAS", responses$Q) & is.element((responses$num+1), PANASpos)] <- "PANASpos"
responses$Measure[grepl("PANAS", responses$Q) & is.element((responses$num+1), PANASneg)] <- "PANASneg"
responses$Measure[responses$sticsaSubscale == "c"] <- "STICSAcog"
responses$Measure[responses$sticsaSubscale == "s"] <- "STICSAsoma"
# reverse back reverse-coded items
maxval <- ddply(responses, ~Measure, summarise, max = max(response) )
responses$max <- maxval$max[match(responses$Measure, maxval$Measure)]
responses$response <- ifelse(responses$Reverse.coded == 1, as.numeric(responses$max) - as.numeric(responses$response), as.numeric(responses$response))
View(responses)
dat_for_efa <- responses %>%
select(ID, Q, response) %>%
pivot_wider(id_cols = ID, names_from = Q, values_from = response)
View(dat_for_efa)
write.csv(responses, sprintf("data/trial_level_questionnaire_session%i.csv", session))
dat_for_efa <- responses %>%
select(ID, Q, response) %>%
pivot_wider(id_cols = ID, names_from = Q, values_from = response)
write.csv(dat_for_efa, sprintf("analysis/dat_for_efa_s%i.csv", session))
descr_for_efa <- responses %>%
select(ID, Q, measure)
descr_for_efa <- responses %>%
select(ID, Q, Measure)
write.csv(descr_for_efa, "analysis/descr_for_efa.csv")
avg <- ddply(responses, ~ID+Measure, summarise, score = mean(response))
avg <- avg[order(avg$ID), ]
View(avg)
save(avg, file = sprintf("analysis/qdat_session%i.Rda", session))
rm(list = ls())
library(plyr)
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
library(ggridges)
theme_set(theme_classic(base_size = 14))
library(here)
session <- 2
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
######### prep questionnaire data #############
qdat <- read.csv(sprintf("data/finalQuestionnaireDataSession%i.csv", session))
qs <- read.csv("task/questionnaires.csv", sep = ";")
qs$Q <- paste(qs$Measure, qs$num, sep = "_")
responses <- qdat %>%
pivot_longer(cols = colnames(qdat)[is.element(colnames(qdat), qs$Q)], names_to = "Q", values_to = "response") %>%
select(ID, response, Q) %>%
left_join(qs %>% select(Q, Attention.check, Reverse.coded, sticsaSubscale, num, Measure), by = "Q") %>%
subset(Attention.check == 0)
# distinguish panas positive and negative
PANASpos <- c(1,3,5,9,10,12,14,16,17,19)
PANASneg <- c(2,4,6,7,8,11,13,15,18,20)
responses$Measure[grepl("PANAS", responses$Q) & is.element((responses$num+1), PANASpos)] <- "PANASpos"
responses$Measure[grepl("PANAS", responses$Q) & is.element((responses$num+1), PANASneg)] <- "PANASneg"
responses$Measure[responses$sticsaSubscale == "c"] <- "STICSAcog"
responses$Measure[responses$sticsaSubscale == "s"] <- "STICSAsoma"
# reverse back reverse-coded items
maxval <- ddply(responses, ~Measure, summarise, max = max(response) )
responses$max <- maxval$max[match(responses$Measure, maxval$Measure)]
responses$response <- ifelse(responses$Reverse.coded == 1, as.numeric(responses$max) - as.numeric(responses$response), as.numeric(responses$response))
write.csv(responses, sprintf("data/trial_level_questionnaire_session%i.csv", session))
dat_for_efa <- responses %>%
select(ID, Q, response) %>%
pivot_wider(id_cols = ID, names_from = Q, values_from = response)
write.csv(dat_for_efa, sprintf("analysis/dat_for_efa_s%i.csv", session))
descr_for_efa <- responses %>%
select(ID, Q, Measure)
write.csv(descr_for_efa, "analysis/descr_for_efa.csv")
avg <- ddply(responses, ~ID+Measure, summarise, score = mean(response))
avg <- avg[order(avg$ID), ]
save(avg, file = sprintf("analysis/qdat_session%i.Rda", session))
# load bandit data
for (task in c("horizon", "sam", "restless"))
# load bandit data
for (task in c("horizon", "sam", "restless")){assign(task, load_and_prep_bandit_data(1)[[task]])}
# load bandit data
for (task in c("horizon", "sam", "restless")){assign(task, load_and_prep_bandit_data(1)[[task]])}
# load bandit data
load_and_prep_bandit_data(1)
# load bandit data
horizon <- load_and_prep_bandit_data(1)["horizon"]
# load bandit data
horizon <- load_and_prep_bandit_data(1)$horizon
length(unique(horizon$ID))
# load bandit data
horizon <- load_and_prep_bandit_data(1)$horizon
sam <- load_and_prep_bandit_data(1)$sam
restless <- load_and_prep_bandit_data(1)$restless
relabel <- function(df) {
relabelled <- df %>%
mutate(x = factor(x, levels = c("horizon", "2AB", "restless"),
labels = c("Horizon", "Two-armed", "Restless")),
y = factor(y, levels = c("restless", "2AB", "horizon"),
labels = c("Restless", "Two-armed", "Horizon")))
return(relabelled)
}
horizon$prev <- c(NA, horizon$chosen[1:nrow(horizon)-1])
horizon$switch <- ifelse(horizon$chosen == horizon$prev, 0, 1)
horizon$switch[horizon$trial == 1] <- NA
sam$prev <- c(NA, sam$chosen[1:nrow(sam)-1])
sam$switch <- ifelse(sam$chosen == sam$prev, 0, 1)
sam$switch[sam$trial == 1] <- NA
restless$prev <- c(NA, restless$chosen[1:nrow(restless)-1])
restless$switch <- ifelse(restless$chosen == restless$prev, 0, 1)
restless$switch[restless$trial == 1] <- NA
Hswitch <- ddply(horizon[horizon$trial > 4, ],~ID,summarise, Pswitch = meann(switch))
Sswitch <- ddply(sam, ~ID,summarise, Pswitch = meann(switch))
Rswitch <- ddply(restless, ~ID, summarise, Pswitch = meann(switch))
Pswitch <- list("horizon" = Hswitch, "2AB" = Sswitch, "restless" = Rswitch) %>%
bind_rows(.id = "model") %>%
pivot_wider(id_cols = ID, names_from = model, values_from = Pswitch) %>%
self_cor() %>%
relabel()
self_cor <- function(df){
cors <- df %>%
select(-ID) %>%
cor(use = "pairwise.complete.obs") %>%
as.data.frame() %>%
mutate(x = rownames(.)) %>%
pivot_longer(cols = -x, names_to = "y", values_to = "cor")
return(cors)
}
dirs_homegrown <- c(
"utils/analysis-utils.R", "utils/plotting-utils.R",
"utils/modeling-utils.R"
)
walk(dirs_homegrown, source)
my_dir <- "figures/figures-ms/submission-1"
if (!dir.exists(my_dir)){dir.create(my_dir, recursive = TRUE)}
Pswitch <- list("horizon" = Hswitch, "2AB" = Sswitch, "restless" = Rswitch) %>%
bind_rows(.id = "model") %>%
pivot_wider(id_cols = ID, names_from = model, values_from = Pswitch) %>%
self_cor() %>%
relabel()
swi <- heatmap(Pswitch) +
labs(title = "P(switch)",
x = element_blank(),
y = element_blank())+
theme(legend.position = "none")
swi
s <- session
params <- readRDS("analysis/bandits/allParams.rds") %>%
mutate(task = recode(task,"sam" = "2AB"),
predictor = paste(task, predictor, sep = "_")) %>%
subset(!grepl("ntercept", predictor) & session == s,
select = c("ID", "predictor", "estimate"))
rm(list = ls())
library(plyr)
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
library(ggridges)
theme_set(theme_bw(base_size = 14))
library(here)
session <- 1
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
s <- session
params <- readRDS("analysis/bandits/allParams.rds") %>%
mutate(task = recode(task,"sam" = "2AB"),
predictor = paste(task, predictor, sep = "_")) %>%
subset(!grepl("ntercept", predictor) & session == s,
select = c("ID", "predictor", "estimate"))
load(sprintf("analysis/bandits/optimal_switch_session%i.Rda", session))
best <- function(df){
rewards <- subset(df, select = grepl("reward", colnames(df)))
rewards <- subset(rewards, select = -reward)
best <- apply(as.array(1:nrow(rewards)), 1, function(x) max(rewards[x,]))
return(best)
}
switch <- function(df){
df$prev <- c(NA, df$chosen[1:nrow(df)-1])
df$switch <- ifelse(df$chosen == df$prev, 0, 1)
df$switch[df$trial == 1] <- NA
return(df)
}
horizon <- load_and_prep_bandit_data(session)$horizon
sam <- load_and_prep_bandit_data(session)$sam
restless <- load_and_prep_bandit_data(session)$restless
best <- function(df){
rewards <- subset(df, select = grepl("reward", colnames(df)))
rewards <- subset(rewards, select = -reward)
best <- apply(as.array(1:nrow(rewards)), 1, function(x) max(rewards[x,]))
return(best)
}
Switch <- function(df){
df$prev <- c(NA, df$chosen[1:nrow(df)-1])
df$switch <- ifelse(df$chosen == df$prev, 0, 1)
df$switch[df$trial == 1] <- NA
return(df)
}
horizon <- Switch(horizon)
sam <- Switch(sam)
restless <- Switch(restless)
horizon$best <- best(horizon)
sam$best <- best(sam)
restless$best <- best(restless)
hos <- horizon %>%
group_by(ID) %>%
summarise(Poptimal = meann(best),
Pswitch = meann(switch))
View(hos)
View(horizon)
hos <- horizon %>%
group_by(ID) %>%
summarise(Poptimal = meann(best),
Pswitch = meann(switch))
View(hos)
hos <- horizon %>%
group_by(ID)
View(hos)

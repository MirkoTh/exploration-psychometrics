Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
install.packages("rstan", type = "source")
baymodelUCB <- brm(chosen | trials(80) ~ V*Horizon + RU*Horizon + (RU*Horizon + V*Horizon| ID), family = "binomial",
data = data[data$trial == 5, ],
chains = 2,
cores = 2,
iter = 8000)
library(brms)
install.packages("rstan", type = "source")
q()
# install.packages("remotes")
remotes::install_github("coatless-mac/macrtools")
install.packages("remotes")
# install.packages("remotes")
remotes::install_github("coatless-mac/macrtools")
# We can check if Xcode CLI is present using:
macrtools::is_xcode_cli_installed()
# We can verify gfortran is present as well
macrtools::is_gfortran_installed()
macrtools::macos_rtools_install()
Latenwittchen12
macrtools::macos_rtools_uninstall()
macrtools::macos_rtools_uninstall()
# We can check if Xcode CLI is present using:
macrtools::is_xcode_cli_installed()
# We can verify gfortran is present as well
macrtools::is_gfortran_installed()
# See if Xcode.app IDE is in use
macrtools::is_xcode_app_installed()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
arch <- ifelse(R.version$arch == "aarch64", "arm64", "x86_64")
cat(paste("\nCXX14FLAGS += -O3 -mtune=native -arch", arch, "-ftemplate-depth-256"),
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
q()
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
# install.packages("remotes")
remotes::install_github("coatless-mac/macrtools")
macrtools::macos_rtools_install()
# We can check if Xcode CLI is present using:
macrtools::is_xcode_cli_installed()
# We can verify gfortran is present as well
macrtools::is_gfortran_installed()
macrtools::macos_rtools_uninstall()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
arch <- ifelse(R.version$arch == "aarch64", "arm64", "x86_64")
cat(paste("\nCXX14FLAGS += -O3 -mtune=native -arch", arch, "-ftemplate-depth-256"),
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
memory.limit(size = 4096)  # Set memory to 4GB (adjust as needed)
library(usethis)
install.packages("usethis")
library(usethis)
usethis::edit_r_environ()
#library(tidyverse)
#library(ggplot2)
library(jsonlite)
library(brms)
theme_set(theme_classic(base_size = 14))
library(plyr)
library(ggplot2)
#library(jsonlite)
library(brms)
#library(ggridges)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
load("analysis/bandits/banditsWave1.Rda")
horizon1 <- horizon
sam1 <- sam
restless1 <- restless
load("analysis/bandits/banditsWave2.Rda")
horizon2 <- horizon
sam2 <- sam
restless2 <- restless
##### kick out everyone that did not do second part ####
horizon1 <- subset(horizon1, is.element(ID, horizon2$ID))
horizon1$optimal <- NA # need to already add these columns bc apparently horizon2 has them
horizon1$chooseBest <- NA
horizon <- rbind(horizon1, horizon2)
sam1 <- subset(sam1, is.element(ID, sam2$ID))
sam1$optimal <- NA
sam1$chooseBest <- NA
sam <- rbind(sam1, sam2)
restless1 <- subset(restless1, is.element(ID, restless2$ID))
restless <- rbind(restless1, restless2)
#source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
############### performance reliability ###########
horizon$optimal <- ifelse(horizon$reward1 > horizon$reward2, 0, 1)
horizon$chooseBest <- ifelse(horizon$chosen == horizon$optimal, 1, 0)
Hperf <- ddply(horizon[horizon$trial > 4, ], ~ID+session,summarise, Poptim = meann(chooseBest))
sam$optimal <- ifelse(sam$reward1 > sam$reward2, 0, 1)
sam$chooseBest <- ifelse(sam$chosen == sam$optimal, 1, 0)
Sperf <- ddply(sam, ~ID + session, summarise, Poptim = meann(chooseBest))
restrewards <- subset(restless, ID == 1, c(reward1, reward2, reward3, reward4, trial, session))
View(restrewards)
restrewards$best <- apply(as.array(1:nrow(restrewards)), 1, function(x) max(c(restrewards$reward1[x],
restrewards$reward2[x],
restrewards$reward3[x],
restrewards$reward4[x])))
View(restrewards)
restless$optimalR <- restrewards$best[match(paste(restless$trial, restless$session), paste(restrewards$trial, restrewards$session))]
restless$chooseBest <- ifelse(restless$reward == restless$optimalR)
restless$chooseBest <- ifelse(restless$reward == restless$optimalR, 1, 0)
Rperf <- ddply(restless, ~ID+session, summarise, Poptim = meann(chooseBest))
View(Rperf)
Hperf$model <- "horizon"
Sperf$model <- "sam"
Rperf$model <- "restless"
Perfs <- rbind(Hperf, Sperf, Rperf)
cors <- data.frame(session1 = rep(models, length(models)),
session2 = rep(models, each = length(models)),
cor = NA)
models <- c("horizon", "sam", "restless")
cors <- data.frame(session1 = rep(models, length(models)),
session2 = rep(models, each = length(models)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 2]))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of proportion of high variance choices between different tasks",
x = element_blank(), y = element_blank())
View(cors)
View(Perfs)
cors <- data.frame(session1 = rep(models, length(models)),
session2 = rep(models, each = length(models)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 2]))
View(cors)
x = 1
cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 2])
View(Perfs)
Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1]
Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 2]
View(Hperf)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 2], use = "pairwise.complete.obs"))
View(cors)
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of proportion of high variance choices between different tasks",
x = element_blank(), y = element_blank())
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between session1 and 2"
)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 1], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between bandit tasks session 1")
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between bandit tasks session 2")
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 2],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 2], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between bandit tasks session 2")
load("analysis/bandits/modelFitHorizon1.Rda")
load("analysis/bandits/modelFitHorizon2.Rda")
View(trueParams1)
View(trueParams)
?gregexpr
session1 <- trueParams1
HParams1 <- trueParams1
test <- "r_ID[1,Intercept]"
gregexpr(test)
gregexpr("[",test)
readr::parse_number(test)
HParams1$ID <- readr::parse_number(HParams1$X)
View(HParams1)
Hparams2 <- trueParams
Hparams2$X <- rownames(Hparams2)
View(Hparams2)
Hparams2$ID <- readr::parse_number(Hparams2$X)
HParams1 <- subset(HParams1, is.element(ID, Hparams2$ID))
HParams <- rbind(HParams1, Hparams2)
colnames(HParams1)
HParams <- rbind(HParams1[ ,!grepl("colMeans", colnames(HParams1))], Hparams2[ ,!grepl("colMeans", colnames(Hparams2))])
table(sort(unique(HParams1$ID)) == sort(unique(Hparams2$ID)))
HParams1$session <- 1
Hparams2$session <- 2
HParams <- rbind(HParams1[ ,!grepl("colMeans", colnames(HParams1))], Hparams2[ ,!grepl("colMeans", colnames(Hparams2))])
table(Perfs$ID[Perfs$session == 1 & Perfs$model == "horizon"] == Perfs$ID)
table(Perfs$ID[Perfs$session == 1 & Perfs$model == "horizon"] == Perfs$ID[Perfs$session == 2 & Perfs$model == "horizon"])
params <- unique(HParams$predictor)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(HParams$estimate[HParams$predictor == cors$session1[x] & HParams$session == 1],
HParams$estimate[HParams$predictor == cors$session2[x] & HParams$session == 2], use = "pairwise.complete.obs"))
cors <- data.frame(session1 = rep(params, length(params)),
session2 = rep(params, each = length(params)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(HParams$estimate[HParams$predictor == cors$session1[x] & HParams$session == 1],
HParams$estimate[HParams$predictor == cors$session2[x] & HParams$session == 2], use = "pairwise.complete.obs"))
View(cors)
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between session 1 and 2")
table(unique(HParams1$ID) == unique(Hparams2$ID))
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(HParams$estimate[HParams$predictor == cors$session1[x] & HParams$session == 1],
HParams$estimate[HParams$predictor == cors$session2[x] & HParams$session == 1], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between session 1 and 2")
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(HParams$estimate[HParams$predictor == cors$session1[x] & HParams$session == 2],
HParams$estimate[HParams$predictor == cors$session2[x] & HParams$session == 2], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between session 1 and 2")
load("analysis/bandits/modelFitSamWave1.Rda")
load("analysis/bandits/modelFitSamWave2.Rda")
load("analysis/bandits/modelFitSamWave1.Rda")
View(modelfit)
modelfit
Sparams1 <- modelfit[[2]]
load("analysis/bandits/modelFitSamWave2.Rda")
Sparams2 <- modelfit[[2]]
View(Sparams1)
SParams1$ID <- readr::parse_number(rownames(Sparams1))
Sparams1$ID <- readr::parse_number(rownames(Sparams1))
Sparams2$ID <- readr::parse_number(rownames(Sparams2))
View(Sparams2)
Sparams1 <- subset(Sparams1, is.element(ID, Sparams2$ID))
Sparams1$session <- 1
Sparams2$session <- 2
SParams <- rbind(Sparams1[ ,!grepl("colMeans", colnames(Sparams1))], Sparams2[ ,!grepl("colMeans", colnames(Sparams2))])
table(unique(Sparams1$ID) == unique(Sparams2$ID))
params <- unique(SParams$predictor)
cors <- data.frame(session1 = rep(params, length(params)),
session2 = rep(params, each = length(params)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(SParams$estimate[SParams$predictor == cors$session1[x] & SParams$session == 1],
SParams$estimate[SParams$predictor == cors$session2[x] & SParams$session == 2], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between session 1 and 2")
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(HParams$estimate[SParams$predictor == cors$session1[x] & SParams$session == 2],
HParams$estimate[SParams$predictor == cors$session2[x] & SParams$session == 2], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of performance between session 1 and 2")
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
library(ggridges)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
session <- 1
load(sprintf("analysis/bandits/banditsWave%i.Rda", session))
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
load(sprintf("analysis/qsWave%i.Rda", session))
qs <- read.csv("task/questionnaires.csv", sep = ";")
qs$Qnum <- NA
for (i in unique(qs$Measure)){
qs$Qnum[qs$Measure == i] <- 0:(nrow(qs[qs$Measure == i, ])-1)
}
qs$Q <- paste(qs$Measure, qs$Qnum, sep = "_")
responses <- pivot_longer(qdat, cols = c(10:71), names_to = "Q", values_to = "response")
responses$attention_check <- qs$Attention.check[match(responses$Q, qs$Q)]
responses$reversed <- qs$Reverse.coded[match(responses$Q, qs$Q)]
responses <- subset(responses, attention_check == 0)
# distinguish panas positive and negative
PANASpos <- c(1,3,5,9,10,12,14,16,17,19)
PANASneg <- c(2,4,6,7,8,11,13,15,18,20)
qs$Measure[qs$Measure == "PANAS" & is.element((qs$Qnum+1), PANASpos)] <- "PANASpos"
qs$Measure[qs$Measure == "PANAS" & is.element((qs$Qnum+1), PANASneg)] <- "PANASneg"
responses$measure <- qs$Measure[match(responses$Q, qs$Q)]
library(plyr)
maxval <- ddply(responses, ~measure, summarise, max = max(response) )
responses$max <- maxval$max[match(responses$measure, maxval$measure)]
responses$response <- ifelse(responses$reversed == 1, as.numeric(responses$max) - as.numeric(responses$response), as.numeric(responses$response))
avg <- ddply(responses, ~ID+measure, summarise, score = mean(response))
######## Horizon task
horizon$highVar <- ifelse(horizon$bayVarL > horizon$bayVarR, 0, 1)
horizon$chooseVar <- ifelse(horizon$chosen == horizon$highVar, 1, 0)
# load both bc need session 2 to see who should be included in session 1
load("analysis/bandits/modelFitHorizon1.Rda")
load("analysis/bandits/modelFitHorizon2.Rda")
HParams1 <- trueParams1
HParams1$ID <- readr::parse_number(HParams1$X)
length(unique(HParams1$ID))
load(sprintf("analysis/bandits/modelFitHorizon%i.Rda", session))
HParams1 <- trueParams1
HParams1$ID <- readr::parse_number(HParams1$X)
View(avg)
View(qs)
params <- unique(HParams$predictor)
load(sprintf("analysis/bandits/modelFitHorizon%i.Rda", session))
if (session == 1){
HParams <- trueParams1
HParams$ID <- readr::parse_number(HParams$X)
}else {
HParams <- trueParams
HParams$X <- rownames(HParams)
HParams$ID <- readr::parse_number(HParams$X)
}
params <- unique(HParams$predictor)
IDs <- intersect(unique(avg$ID), unique(HParams$ID))
questionnaires <- unique(qs$Measure)
cors <- data.frame(parameter = rep(params, length(questionnaires)),
questionnaire = rep(questionnaires, each = length(params)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(HParams$estimate[HParams$predictor == cors$parameter[x] & is.element(HParams$ID, IDs)],
avg$score[avg$measure == cors$questionnaire[x] & is.element(avg$ID, IDs)]))
View(cors)
ggplot(cors, aes(x = parameter, y = questionnaire, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of proportion of high variance choices between different tasks",
x = element_blank(), y = element_blank())+
scale_y_discrete(labels = c("openness", "exploration", "neg. mood","pos. mood", "depression", "anxiety"))
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
library(ggridges)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
session <- 2
load(sprintf("analysis/bandits/banditsWave%i.Rda", session))
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
########## prep questionnaire data #######
load(sprintf("analysis/qsWave%i.Rda", session))
load(sprintf("analysis/qdatWave%i.Rda", session))
qs <- read.csv("task/questionnaires.csv", sep = ";")
qs$Qnum <- NA
for (i in unique(qs$Measure)){
qs$Qnum[qs$Measure == i] <- 0:(nrow(qs[qs$Measure == i, ])-1)
}
qs$Q <- paste(qs$Measure, qs$Qnum, sep = "_")
responses <- pivot_longer(qdat, cols = c(10:71), names_to = "Q", values_to = "response")
responses$attention_check <- qs$Attention.check[match(responses$Q, qs$Q)]
responses$reversed <- qs$Reverse.coded[match(responses$Q, qs$Q)]
responses <- subset(responses, attention_check == 0)
# distinguish panas positive and negative
PANASpos <- c(1,3,5,9,10,12,14,16,17,19)
PANASneg <- c(2,4,6,7,8,11,13,15,18,20)
qs$Measure[qs$Measure == "PANAS" & is.element((qs$Qnum+1), PANASpos)] <- "PANASpos"
qs$Measure[qs$Measure == "PANAS" & is.element((qs$Qnum+1), PANASneg)] <- "PANASneg"
responses$measure <- qs$Measure[match(responses$Q, qs$Q)]
library(plyr)
maxval <- ddply(responses, ~measure, summarise, max = max(response) )
responses$max <- maxval$max[match(responses$measure, maxval$measure)]
responses$response <- ifelse(responses$reversed == 1, as.numeric(responses$max) - as.numeric(responses$response), as.numeric(responses$response))
avg <- ddply(responses, ~ID+measure, summarise, score = mean(response))
load(sprintf("analysis/bandits/modelFitHorizon%i.Rda", session))
if (session == 1){
HParams <- trueParams1
HParams$ID <- readr::parse_number(HParams$X)
}else {
HParams <- trueParams
HParams$X <- rownames(HParams)
HParams$ID <- readr::parse_number(HParams$X)
}
params <- unique(HParams$predictor)
IDs <- intersect(unique(avg$ID), unique(HParams$ID))
questionnaires <- unique(qs$Measure)
cors <- data.frame(parameter = rep(params, length(questionnaires)),
questionnaire = rep(questionnaires, each = length(params)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(HParams$estimate[HParams$predictor == cors$parameter[x] & is.element(HParams$ID, IDs)],
avg$score[avg$measure == cors$questionnaire[x] & is.element(avg$ID, IDs)]))
ggplot(cors, aes(x = parameter, y = questionnaire, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of proportion of high variance choices between different tasks",
x = element_blank(), y = element_blank())+
scale_y_discrete(labels = c("openness", "exploration", "neg. mood","pos. mood", "depression", "anxiety"))
ggplot(cors, aes(x = parameter, y = questionnaire, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation Horizon task parameters with questionnaire items",
substitle = sprintf("Session %i", session),
x = element_blank(), y = element_blank())+
scale_y_discrete(labels = c("openness", "exploration", "neg. mood","pos. mood", "depression", "anxiety"))
ggplot(cors, aes(x = parameter, y = questionnaire, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation Horizon task parameters with questionnaire items",
substitle = sprintf("Session %i", session),
x = element_blank(), y = element_blank())+
scale_y_discrete(labels = c("openness", "exploration", "neg. mood","pos. mood", "depression", "anxiety"))
ggplot(cors, aes(x = parameter, y = questionnaire, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation Horizon task parameters with questionnaire items",
subtitle = sprintf("Session %i", session),
x = element_blank(), y = element_blank())+
scale_y_discrete(labels = c("openness", "exploration", "neg. mood","pos. mood", "depression", "anxiety"))
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
library(ggridges)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
session <- 1
load(sprintf("analysis/bandits/banditsWave%i.Rda", session))
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
########## prep questionnaire data #######
load(sprintf("analysis/qdatWave%i.Rda", session))
library(tidyverse)
library(ggplot2)
#library(jsonlite)
library(brms)
library(ggridges)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
session <- 1
load(sprintf("analysis/bandits/banditsWave%i.Rda", session))
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
########## prep questionnaire data #######
load(sprintf("analysis/qswave%i.Rda", session))
qs <- read.csv("task/questionnaires.csv", sep = ";")
qs$Qnum <- NA
for (i in unique(qs$Measure)){
qs$Qnum[qs$Measure == i] <- 0:(nrow(qs[qs$Measure == i, ])-1)
}
qs$Q <- paste(qs$Measure, qs$Qnum, sep = "_")
responses <- pivot_longer(qdat, cols = c(10:71), names_to = "Q", values_to = "response")
responses$attention_check <- qs$Attention.check[match(responses$Q, qs$Q)]
responses$reversed <- qs$Reverse.coded[match(responses$Q, qs$Q)]
responses <- subset(responses, attention_check == 0)
# distinguish panas positive and negative
PANASpos <- c(1,3,5,9,10,12,14,16,17,19)
PANASneg <- c(2,4,6,7,8,11,13,15,18,20)
qs$Measure[qs$Measure == "PANAS" & is.element((qs$Qnum+1), PANASpos)] <- "PANASpos"
qs$Measure[qs$Measure == "PANAS" & is.element((qs$Qnum+1), PANASneg)] <- "PANASneg"
responses$measure <- qs$Measure[match(responses$Q, qs$Q)]
library(plyr)
maxval <- ddply(responses, ~measure, summarise, max = max(response) )
responses$max <- maxval$max[match(responses$measure, maxval$measure)]
responses$response <- ifelse(responses$reversed == 1, as.numeric(responses$max) - as.numeric(responses$response), as.numeric(responses$response))
avg <- ddply(responses, ~ID+measure, summarise, score = mean(response))
#load("analysis/bandits/recovSam.Rda")
load(sprintf("analysis/bandits/modelFitSamWave%i.Rda", session))
Sparams <- modelfit[[2]]
Sparams$ID <- readr::parse_number(rownames(Sparams))
params <- unique(Sparams$predictor)
IDs <- intersect(unique(avg$ID), unique(Sparams$ID))
cors <- data.frame(parameter = rep(params, length(questionnaires)),
questionnaire = rep(questionnaires, each = length(params)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Sparams$estimate[Sparams$predictor == cors$parameter[x] & is.element(Sparams$ID, IDs)],
avg$score[avg$measure == cors$questionnaire[x] & is.element(avg$ID, IDs)]))
ggplot(cors, aes(x = parameter, y = questionnaire, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of model parameters with questionnaire scores",
x = element_blank(), y = element_blank())+
scale_y_discrete(labels = c("openness", "exploration", "neg. mood","pos. mood", "depression", "anxiety"))
session <- 2
load(sprintf("analysis/bandits/banditsWave%i.Rda", session))
source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
load(sprintf("analysis/qswave%i.Rda", session))
qs <- read.csv("task/questionnaires.csv", sep = ";")
qs$Qnum <- NA
for (i in unique(qs$Measure)){
qs$Qnum[qs$Measure == i] <- 0:(nrow(qs[qs$Measure == i, ])-1)
}
qs$Q <- paste(qs$Measure, qs$Qnum, sep = "_")
responses <- pivot_longer(qdat, cols = c(10:71), names_to = "Q", values_to = "response")
responses$attention_check <- qs$Attention.check[match(responses$Q, qs$Q)]
responses$reversed <- qs$Reverse.coded[match(responses$Q, qs$Q)]
responses <- subset(responses, attention_check == 0)
# distinguish panas positive and negative
PANASpos <- c(1,3,5,9,10,12,14,16,17,19)
PANASneg <- c(2,4,6,7,8,11,13,15,18,20)
qs$Measure[qs$Measure == "PANAS" & is.element((qs$Qnum+1), PANASpos)] <- "PANASpos"
qs$Measure[qs$Measure == "PANAS" & is.element((qs$Qnum+1), PANASneg)] <- "PANASneg"
responses$measure <- qs$Measure[match(responses$Q, qs$Q)]
library(plyr)
maxval <- ddply(responses, ~measure, summarise, max = max(response) )
responses$max <- maxval$max[match(responses$measure, maxval$measure)]
responses$response <- ifelse(responses$reversed == 1, as.numeric(responses$max) - as.numeric(responses$response), as.numeric(responses$response))
avg <- ddply(responses, ~ID+measure, summarise, score = mean(response))
########### prep bandit behaviour - proportion
#load("analysis/bandits/recovSam.Rda")
load(sprintf("analysis/bandits/modelFitSamWave%i.Rda", session))
Sparams <- modelfit[[2]]
Sparams$ID <- readr::parse_number(rownames(Sparams))
params <- unique(Sparams$predictor)
IDs <- intersect(unique(avg$ID), unique(Sparams$ID))
cors <- data.frame(parameter = rep(params, length(questionnaires)),
questionnaire = rep(questionnaires, each = length(params)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Sparams$estimate[Sparams$predictor == cors$parameter[x] & is.element(Sparams$ID, IDs)],
avg$score[avg$measure == cors$questionnaire[x] & is.element(avg$ID, IDs)]))
ggplot(cors, aes(x = parameter, y = questionnaire, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of model parameters with questionnaire scores",
x = element_blank(), y = element_blank())+
scale_y_discrete(labels = c("openness", "exploration", "neg. mood","pos. mood", "depression", "anxiety"))
View(Sparams)
ggplot(cors, aes(x = parameter, y = questionnaire, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of model parameters with questionnaire scores",
x = element_blank(), y = element_blank())
sticsa <- subset(avg, measure == "STICSA")
Sparams$anxiety <- sticsa$score[match(Sparams$ID, sticsa$ID)]
lm(RU ~anxiety, Sparams)
lm(estimate ~anxiety, Sparams[Sparams$predictor == "RU", ])
summary(lm(estimate ~anxiety, Sparams[Sparams$predictor == "RU", ]))

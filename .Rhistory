"Autism",
""))+
coord_polar(theta = "x", direction=1) +
theme_minimal(base_size = 16)+
labs(title = "Psychiatric questionnaire scores of GPT-3",
x = element_blank(),
y = element_blank())+
theme(axis.text.y = element_blank(),
plot.margin = margin(10, 10, 10, 10))+
ylim(0, max(df$score))
ggplot(df, aes(x = questionnaire, y = score, group = ID)) + geom_point(size = 2)+ geom_line(size = 1.5) +
scale_x_discrete(expand = c(0,0),
labels = c("Cognitive anxiety",
"Somatic anxiety",
"Intolerance to uncertainty",
"Depression",
"Positive symptoms of psychosis",
"Negative symptoms of psychosis",
"Rumination",
"Negative affect",
"Externalising",
"ADHD",
"Autism",
""))+
coord_polar(theta = "x", direction=1) +
theme_minimal(base_size = 16)+
labs(title = "Psychiatric questionnaire scores of GPT-3",
x = element_blank(),
y = element_blank())+
theme(axis.text.y = element_blank(),
plot.margin = margin(100, 100, 100, 100))+
ylim(0, max(df$score))
ggplot(df, aes(x = questionnaire, y = score, group = ID)) + geom_point(size = 2)+ geom_line(size = 1.5) +
scale_x_discrete(expand = c(0,0),
labels = c("Cognitive anxiety",
"Somatic anxiety",
"Intolerance to uncertainty",
"Depression",
"Positive symptoms of psychosis",
"Negative symptoms of psychosis",
"Rumination",
"Negative affect",
"Externalising",
"ADHD",
"Autism",
""))+
coord_polar(theta = "x", direction=1) +
theme_minimal(base_size = 16)+
labs(title = "Psychiatric questionnaire scores of GPT-3",
x = element_blank(),
y = element_blank())+
theme(axis.text.y = element_blank(),
plot.margin = margin(0,0,0,0))+
ylim(0, max(df$score))
ggplot(df, aes(x = questionnaire, y = score, group = ID)) + geom_point(size = 2)+ geom_line(size = 1.5) +
scale_x_discrete(expand = c(0,0),
labels = c("Cognitive anxiety",
"Somatic anxiety",
"Intolerance to uncertainty",
"Depression",
"Positive symptoms of psychosis",
"Negative symptoms of psychosis",
"Rumination",
"Negative affect",
"Externalising",
"ADHD",
"Autism",
""))+
coord_polar(theta = "x", direction=1, clip = "off") +
theme_minimal(base_size = 16)+
labs(title = "Psychiatric questionnaire scores of GPT-3",
x = element_blank(),
y = element_blank())+
theme(axis.text.y = element_blank())+
ylim(0, max(df$score))
ggplot(df, aes(x = questionnaire, y = score, group = ID)) + geom_point(size = 2)+ geom_line(size = 1.5) +
scale_x_discrete(expand = c(0,0),
labels = c("Cognitive anxiety",
"Somatic anxiety",
"Intolerance to uncertainty",
"Depression",
"Positive symptoms of psychosis",
"Negative symptoms of psychosis",
"Rumination",
"Negative affect",
"Externalising",
"ADHD",
"Autism",
""))+
coord_polar(theta = "x", direction=1, clip = "off") +
theme_minimal(base_size = 18)+
labs(title = "Psychiatric questionnaire scores of GPT-3",
x = element_blank(),
y = element_blank())+
theme(axis.text.y = element_blank())+
ylim(1, max(df$score))
ggplot(df, aes(x = questionnaire, y = score, group = ID)) + geom_point(size = 2)+ geom_line(size = 1.5) +
scale_x_discrete(expand = c(0,0),
labels = c("Cognitive anxiety",
"Somatic anxiety",
"Intolerance to uncertainty",
"Depression",
"Positive symptoms of psychosis",
"Negative symptoms of psychosis",
"Rumination",
"Negative affect",
"Externalising",
"ADHD",
"Autism",
""))+
coord_polar(theta = "x", direction=1, clip = "off") +
theme_minimal(base_size = 18)+
labs(title = "Psychiatric questionnaire scores of GPT-3",
x = element_blank(),
y = element_blank())+
theme(axis.text.y = element_blank())+
ylim(2, max(df$score))
ggplot(df, aes(x = questionnaire, y = score, group = ID)) + geom_point(size = 2)+ geom_line(size = 1.5) +
scale_x_discrete(expand = c(0,0),
labels = c("Cognitive anxiety",
"Somatic anxiety",
"Intolerance to uncertainty",
"Depression",
"Positive symptoms of psychosis",
"Negative symptoms of psychosis",
"ADHD",
"Negative affect",
"Externalising",
"Rumination",
"Autism",
""))+
coord_polar(theta = "x", direction=1, clip = "off") +
theme_minimal(base_size = 18)+
labs(title = "Psychiatric questionnaire scores of GPT-3",
x = element_blank(),
y = element_blank())+
theme(axis.text.y = element_blank())+
ylim(2, max(df$score))
12*20
11.99+13.99
747.89/6
952+491
(26+31+300+(65.76-2.89-7.99-0.5-1.19-1.99-2.69-1.19-1.29))
(26+31+300+(65.76-2.89-7.99-0.5-1.19-1.99-2.69-1.19-1.29))/5
(26+31+300+(65.76-2.89-7.99-0.5-1.19-1.99-2.69-1.19-1.29))/5 -36
(26+31+300+(65.76-2.89-7.99-0.5-1.19-1.99-2.69-1.19-1.29))/5 -(36 - 36/5)
ausgaben = (26+31+300+(65.76-2.89-7.99-0.5-1.19-1.99-2.69-1.19-1.29)) + 36
pp = ausgaben/5
pp - 36
pp - 36 + 2*pp
ausgaben - 2*pp
403.03 - 2*pp
EUR 72.91572000000001 - 48
72.91572000000001 - 48
205 * 20 * 10 + 20340
orig = 350*20*10
brief = 205*20*10
90340 + 20*3470
61340 + 20*3470
61340 + 20*2620
61340 + 20*1630
90340 + 20*2620
90340 + 20* 1630
90340 + 159740
90340 + 142740
90340 + 122940
61340 + 130740
61340 + 13074
61340 + 113740
61340 + 93940
20340 + 250080
20340 + 233080
20340 + 213280
20340 + 192080
20340 + 175080
20340 + 155280
p = 0.03/1000
270420 *p
159740*200
159740 / 200
253420 *p
233620 *p
212420 *p
195420 *p
175620 *p
57*6*30
v1a = 3470*20
orig = 350*30*6
brief = 205 * 30 *6
v1a = 347 * 30*6
v1b = 262 * 30*6
v2 = 163*30*6
10260*3 + orig*2 + v1a
219240 *p
10260*3 + orig*2 + v1b
10260*3 + orig*2 + v2
10260*3 + brief*2 + v2
10260*3 + brief*2 + v1b
10260*3 + brief*2 + v1a
# check out parameter estimates from model fitting
library(ggplot2)
theme_set(theme_classic(base_size = 14))
library(ggpubr)
library(RColorBrewer)
library(plyr)
red <- brewer.pal(12,"Paired")[6]
darkBlue <-  brewer.pal(12,"Paired")[2]
se<-function(x){sd(x)/sqrt(length(x))}
estimates <- read.csv("/Users/kwitte/Library/CloudStorage/OneDrive-Personal/CPI/safeExploration/dataAnalysis/modelFitting/results/model_fitting/ucb_lcb_n_master/estimates.csv")
# check out parameter estimates from model fitting
library(ggplot2)
theme_set(theme_classic(base_size = 14))
library(ggpubr)
library(RColorBrewer)
library(plyr)
red <- brewer.pal(12,"Paired")[6]
darkBlue <-  brewer.pal(12,"Paired")[2]
se<-function(x){sd(x)/sqrt(length(x))}
estimates$kraken_present <- factor(estimates$kraken_present, levels = c(0, 1), labels = c("safe", "risky"))
# beta
p5 <- ggplot(estimates, aes(x = beta, fill = kraken_present, group = kraken_present)) + geom_density(alpha = 0.6) +
geom_jitter(aes(x = beta, y = -0.2, color = kraken_present), height = 0.04, alpha = 0.3)+
geom_errorbar(data = estimates[estimates$kraken_present == "safe", ], aes(xmin = mean(beta) - 1.96*se(beta), xmax = mean(beta) + 1.96*se(beta), y = 0, width = 0.8), color = darkBlue, size = 1) +
geom_errorbar(data = estimates[estimates$kraken_present == "risky", ], aes(xmin = mean(beta) - 1.96*se(beta), xmax = mean(beta) + 1.96*se(beta), y = 0, width = 0.8), color = red, size = 1) +
geom_point(data = estimates[estimates$kraken_present == "safe", ],aes(x = mean(beta), y = 0), color = darkBlue, size = 2, show.legend = F) +
geom_point(data = estimates[estimates$kraken_present == "risky", ],aes(x = mean(beta), y = 0), color = red, size = 2, show.legend = F) +
geom_vline(xintercept = 0, linetype = "dashed")+
scale_fill_manual(values = c(darkBlue, red), name = "Condition") +
scale_color_manual(values = c(darkBlue, red), name = "Condition") +
scale_x_continuous(name = expression(beta))+
labs(title = expression(beta ~ "estimates"), y = "Density")
p6 <- ggplot(estimates, aes(x = ls, fill = kraken_present, group = kraken_present)) + geom_density(alpha = 0.6) +
geom_jitter(aes(x = ls, y = -0.2, color = kraken_present), height = 0.04, alpha = 0.3)+
geom_errorbar(data = estimates[estimates$kraken_present == "safe", ], aes(xmin = mean(ls) - 1.96*se(ls), xmax = mean(ls) + 1.96*se(ls), y = 0, width = 0.2), color = darkBlue, size = 1) +
geom_errorbar(data = estimates[estimates$kraken_present == "risky", ], aes(xmin = mean(ls) - 1.96*se(ls), xmax = mean(ls) + 1.96*se(ls), y = 0, width = 0.2), color = red, size = 1) +
geom_point(data = estimates[estimates$kraken_present == "safe", ],aes(x = mean(ls), y = 0), color = darkBlue, size = 2, show.legend = F) +
geom_point(data = estimates[estimates$kraken_present == "risky", ],aes(x = mean(ls), y = 0), color = red, size = 2, show.legend = F) +
scale_fill_manual(values = c(darkBlue, red), name = "Condition") +
scale_color_manual(values = c(darkBlue, red), name = "Condition") +
scale_x_continuous(name = expression(lambda))+
labs(title = expression(lambda ~ "estimates"), y = "Density")
p7 <- ggplot(estimates, aes(x = tau, fill = kraken_present, group = kraken_present)) + geom_density(alpha = 0.6) +
geom_jitter(aes(x = tau, y = -2, color = kraken_present), height = 2, alpha = 0.3)+
geom_errorbar(data = estimates[estimates$kraken_present == "safe", ], aes(xmin = mean(tau) - 1.96*se(tau), xmax = mean(tau) + 1.96*se(tau), y = 0, width = 5), color = darkBlue, size = 1) +
geom_errorbar(data = estimates[estimates$kraken_present == "risky", ], aes(xmin = mean(tau) - 1.96*se(tau), xmax = mean(tau) + 1.96*se(tau), y = 0, width = 5), color = red, size = 1) +
geom_point(data = estimates[estimates$kraken_present == "safe", ],aes(x = mean(tau), y = 0), color = darkBlue, size = 2, show.legend = F) +
geom_point(data = estimates[estimates$kraken_present == "risky", ],aes(x = mean(tau), y = 0), color = red, size = 2, show.legend = F) +
scale_fill_manual(values = c(darkBlue, red), name = "Condition")+
scale_color_manual(values = c(darkBlue, red), name = "Condition") +
scale_x_continuous(name = expression(tau))+
labs(title = expression(tau ~ "estimates"), y = "Density")
ggarrange(p5, p6, p7, ncol = 1, nrow= 3)
library(tidyverse)
my_two_seeds <- c(39737632, 8567389)
# set session_id to 1 or 2
# stimulus sets for all tasks are generated for that session
session_id <- 1
set.seed(my_two_seeds[session_id])
source("wm-tasks/utils-gen-stim.R")
source("utils-gen-stim.R")
setwd("/Users/kwitte/Documents/GitHub/exploration-psychometrics")
source("wm-tasks/utils-gen-stim.R")
abs(session_id - 3)
as_required <- FALSE
tbl_4a_rlb <- generate_rl_bandits_as_required(FALSE, session_id)
tbl_4a_rlb_practice <- generate_rl_bandits_as_required(FALSE, abs(session_id - 3)) # practice from other session
View(tbl_4a_rlb)
tbl_4a_rlb$block <- 2
tbl_4a_rlb_practice$block <- 1
rewards <- rbind(tbl_4a_rlb_practice, tbl_4a_rlb)
nBlocks <- 2 # 1 for practice
nTrials <- c(10,200)# first is practice
ls = list()
for (i in 1:nBlocks){
block = list()
for (j in 1:nTrials[block]){
re <- c(round(rewards$`Arm 1`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 2`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 3`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 4`[rewards$block == i & rewards$trial_id == j]))
block[[j]] <- re
}
ls[[i]] <- block
}
re <- c(round(rewards$`Arm 1`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 2`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 3`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 4`[rewards$block == i & rewards$trial_id == j]))
block = list()
ls = list()
for (i in 1:nBlocks){
block = list()
for (j in 1:nTrials[i]){
re <- c(round(rewards$`Arm 1`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 2`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 3`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 4`[rewards$block == i & rewards$trial_id == j]))
block[[j]] <- re
}
ls[[i]] <- block
}
ls
library(jsonlite)
json = toJSON(ls)
write(json, paste("task/rewards4ARB", session_id, ".json", sep = ""))
# set session_id to 1 or 2
# stimulus sets for all tasks are generated for that session
session_id <- 2
set.seed(my_two_seeds[session_id])
as_required <- FALSE
tbl_4a_rlb <- generate_rl_bandits_as_required(FALSE, session_id)
ggplot(tbl_4a_rlb %>% pivot_longer(c(`Arm 1`, `Arm 2`, `Arm 3`, `Arm 4`)), aes(trial_id, value, group = name)) +
geom_line(aes(color = name), size = .75) +
scale_color_viridis_d(name = "") +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
labs(x = "Trial ID", y = "Reward")
plot(tbl_4a_rlb$min_diff_to_max)
hist(tbl_4a_rlb$min_diff_to_max)
plot(tbl_4a_rlb$avg_difference)
hist(tbl_4a_rlb$avg_difference)
cor(tbl_4a_rlb$min_diff_to_max, tbl_4a_rlb$avg_difference)
## make practice trials
tbl_4a_rlb_practice <- generate_rl_bandits_as_required(FALSE, abs(session_id - 3)) # practice from other session
tbl_4a_rlb$block <- 2
tbl_4a_rlb_practice$block <- 1
rewards <- rbind(tbl_4a_rlb_practice, tbl_4a_rlb)
## save as json
nBlocks <- 2 # 1 for practice
nTrials <- c(10,200)# first is practice
ls = list()
for (i in 1:nBlocks){
block = list()
for (j in 1:nTrials[i]){
re <- c(round(rewards$`Arm 1`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 2`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 3`[rewards$block == i & rewards$trial_id == j]),
round(rewards$`Arm 4`[rewards$block == i & rewards$trial_id == j]))
block[[j]] <- re
}
ls[[i]] <- block
}
library(jsonlite)
json = toJSON(ls)
write(json, paste("task/rewards4ARB", session_id, ".json", sep = ""))
data <- read.csv("ZallerEtAl.csv")
################ Horizon task -----------------------------------------------
data <- read.csv("wm-tasks/ZallerEtAl.csv")
nBlocks = 81 # 1 extra for practice
nTrials = 10 # just always sample 10 trials even if it is a short horizon and the round is over after 5 trials bc simpler this way
rewards <- data.frame(block = 1:nBlocks,
reward1 = c(40, data$mu_L[data$Subject == data$Subject[3000] & data$Trial == 1]), # their rewards are perfectly balanced, just different order for every subject
reward2 = c(60, data$mu_R[data$Subject == data$Subject[3000] & data$Trial == 1]),
infoCond = c(-1, data$Info[data$Subject == data$Subject[1] & data$Trial == 1]), # stealing infoCond and Horizon from Zaller et al. bc it is a pain to get it as perfectly orthogonal as they did without having a pattern
Horizon = c(10, data$Horizon[data$Subject == data$Subject[1] & data$Trial == 1]))
View(rewards)
huffle(c(0,1,1,1))
shuffle(c(0,1,1,1))
# make condition random
library(permute)
shuffle(4)
shuffle(4)
shuffle(4)
choices <- c(0,1,1,1)
choices[shuffle(4)]
fixed <- list()
for (i in 1:nBlocks){
if (rewards$infoCond[rewards$block == i] == -1){ # right more info
choices <- c(0,1,1,1)
} else if (rewards$infoCond[rewards$block == i] == 0){# equal info
choices <- c(1,1,0,0)
}else if (rewards$infoCond[rewards$block == i] == 1){# left more info
choices <- c(0,0,0,1)
}
fixed[i] <- choices[shuffle(4)]
}
warnings()
fixed <- list()
for (i in 1:nBlocks){
if (rewards$infoCond[rewards$block == i] == -1){ # right more info
choices <- c(0,1,1,1)
} else if (rewards$infoCond[rewards$block == i] == 0){# equal info
choices <- c(1,1,0,0)
}else if (rewards$infoCond[rewards$block == i] == 1){# left more info
choices <- c(0,0,0,1)
}
fixed[[i]] <- choices[shuffle(4)]
}
fixed
write(json, paste("task/fixedChoices", session_id,".json", sep = ""))
# set session_id to 1 or 2
# stimulus sets for all tasks are generated for that session
session_id <- 1
set.seed(my_two_seeds[session_id])
fixed <- list()
for (i in 1:nBlocks){
if (rewards$infoCond[rewards$block == i] == -1){ # right more info
choices <- c(0,1,1,1)
} else if (rewards$infoCond[rewards$block == i] == 0){# equal info
choices <- c(1,1,0,0)
}else if (rewards$infoCond[rewards$block == i] == 1){# left more info
choices <- c(0,0,0,1)
}
fixed[[i]] <- choices[shuffle(4)]
}
json = toJSON(fixed)
write(json, paste("task/fixedChoices", session_id,".json", sep = ""))
horizon <- rewards$Horizon
json = toJSON(horizon)
write(json, paste("task/Horizon", session_id,".json", sep = ""))
# set session_id to 1 or 2
# stimulus sets for all tasks are generated for that session
session_id <- 1
set.seed(my_two_seeds[session_id])
json = toJSON(horizon)
write(json, paste("task/Horizon", session_id,".json", sep = ""))
# set session_id to 1 or 2
# stimulus sets for all tasks are generated for that session
session_id <- 2
set.seed(my_two_seeds[session_id])
horizon <- rewards$Horizon
json = toJSON(horizon)
write(json, paste("task/Horizon", session_id,".json", sep = ""))
# set session_id to 1 or 2
# stimulus sets for all tasks are generated for that session
session_id <- 1
set.seed(my_two_seeds[session_id])
data <- read.csv("wm-tasks/ZallerEtAl.csv")
nBlocks = 81 # 1 extra for practice
nTrials = 10 # just always sample 10 trials even if it is a short horizon and the round is over after 5 trials bc simpler this way
rewards <- data.frame(block = 1:nBlocks,
reward1 = c(40, data$mu_L[data$Subject == data$Subject[3000] & data$Trial == 1]), # their rewards are perfectly balanced, just different order for every subject
reward2 = c(60, data$mu_R[data$Subject == data$Subject[3000] & data$Trial == 1]),
infoCond = c(-1, data$Info[data$Subject == data$Subject[1] & data$Trial == 1]), # stealing infoCond and Horizon from Zaller et al. bc it is a pain to get it as perfectly orthogonal as they did without having a pattern
Horizon = c(10, data$Horizon[data$Subject == data$Subject[1] & data$Trial == 1]))
noise_var <- 17 # variance inferred from dataset by Zaller et al
## save rewards
ls = list()
for (i in 1:nBlocks){
block = list()
for (j in 1:nTrials){
re <- c(round(rewards$reward1[rewards$block == i] + rnorm(1,0,sqrt(noise_var))), round(rewards$reward2[rewards$block == i]+ rnorm(1,0,sqrt(noise_var))))
block[[j]] <- re
}
ls[[i]] <- block
}
library(jsonlite)
json = toJSON(ls)
write(json, paste("task/rewardsHorizon", session_id,".json", sep = ""))
## save fixed choices
fixed <- list()
for (i in 1:nBlocks){
if (rewards$infoCond[rewards$block == i] == -1){ # right more info
choices <- c(0,1,1,1)
} else if (rewards$infoCond[rewards$block == i] == 0){# equal info
choices <- c(1,1,0,0)
}else if (rewards$infoCond[rewards$block == i] == 1){# left more info
choices <- c(0,0,0,1)
}
fixed[[i]] <- choices[shuffle(4)]
}
json = toJSON(fixed)
write(json, paste("task/fixedChoices", session_id,".json", sep = ""))
## save horizon
horizon <- rewards$Horizon
json = toJSON(horizon)
write(json, paste("task/Horizon", session_id,".json", sep = ""))
# set session_id to 1 or 2
# stimulus sets for all tasks are generated for that session
session_id <- 2
set.seed(my_two_seeds[session_id])
data <- read.csv("wm-tasks/ZallerEtAl.csv")
nBlocks = 81 # 1 extra for practice
nTrials = 10 # just always sample 10 trials even if it is a short horizon and the round is over after 5 trials bc simpler this way
rewards <- data.frame(block = 1:nBlocks,
reward1 = c(40, data$mu_L[data$Subject == data$Subject[3000] & data$Trial == 1]), # their rewards are perfectly balanced, just different order for every subject
reward2 = c(60, data$mu_R[data$Subject == data$Subject[3000] & data$Trial == 1]),
infoCond = c(-1, data$Info[data$Subject == data$Subject[1] & data$Trial == 1]), # stealing infoCond and Horizon from Zaller et al. bc it is a pain to get it as perfectly orthogonal as they did without having a pattern
Horizon = c(10, data$Horizon[data$Subject == data$Subject[1] & data$Trial == 1]))
noise_var <- 17 # variance inferred from dataset by Zaller et al
## save rewards
ls = list()
for (i in 1:nBlocks){
block = list()
for (j in 1:nTrials){
re <- c(round(rewards$reward1[rewards$block == i] + rnorm(1,0,sqrt(noise_var))), round(rewards$reward2[rewards$block == i]+ rnorm(1,0,sqrt(noise_var))))
block[[j]] <- re
}
ls[[i]] <- block
}
library(jsonlite)
json = toJSON(ls)
write(json, paste("task/rewardsHorizon", session_id,".json", sep = ""))
## save fixed choices
fixed <- list()
for (i in 1:nBlocks){
if (rewards$infoCond[rewards$block == i] == -1){ # right more info
choices <- c(0,1,1,1)
} else if (rewards$infoCond[rewards$block == i] == 0){# equal info
choices <- c(1,1,0,0)
}else if (rewards$infoCond[rewards$block == i] == 1){# left more info
choices <- c(0,0,0,1)
}
fixed[[i]] <- choices[shuffle(4)]
}
json = toJSON(fixed)
write(json, paste("task/fixedChoices", session_id,".json", sep = ""))
## save horizon
horizon <- rewards$Horizon
json = toJSON(horizon)
write(json, paste("task/Horizon", session_id,".json", sep = ""))

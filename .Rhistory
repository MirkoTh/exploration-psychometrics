"RU" = "Directed",
"VTU" = "Random",
"delta_mean" = "Value-guided",
"info" = "Directed"),
task = recode(task, "sam" = "Two-armed",
"horizon" = "Horizon",
"restless" = "Restless"),
variable = paste(predictor, task)) %>%
pivot_wider(id_cols = "ID", names_from = "variable", values_from = "estimate") %>%
subset(select = -ID) %>%
cor(use="pairwise.complete.obs") %>%
as.data.frame() %>%
mutate(x = rownames(.)) %>%
pivot_longer(cols = -x, names_to = "y", values_to = "cor") %>%
mutate(x = factor(x, levels = c("Value-guided Horizon", "Value-guided Two-armed", "Value-guided Restless",
"Directed Horizon", "Directed Two-armed", "Directed Restless",
"Random Two-armed"),
labels = c("Value-guided Horizon", "Value-guided Two-armed", "Value-guided Restless",
"Directed Horizon", "Directed Two-armed", "Directed Restless",
"Random Two-armed")),
y = factor(y, levels = c("Random Two-armed", "Directed Restless", "Directed Two-armed", "Directed Horizon",
"Value-guided Restless", "Value-guided Two-armed", "Value-guided Horizon")))
param_based <- heatmap(cors) +
labs(title = "Convergent validity of parameter estimates",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_hline(yintercept = 1.5, color = "white", size = 3)+
geom_hline(yintercept = 4.5, color = "white", size = 3)+
geom_vline(xintercept = 6.5, color = "white", size = 3)+
geom_vline(xintercept = 3.5, color = "white", size = 3)
param_based <- ggarrange(param_based, labels = c("E"))
ggarrange(task_based, param_based, ncol = 2, common.legend = T,
legend = "right")
task_based <- ggarrange(optim, re, swi, WM, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T)
task_based
param_based <- ggarrange(param_based, labels = c("E"), common.legend = T)
ggarrange(task_based, param_based, ncol = 2, common.legend = T,
legend = "right")
task_based <- ggarrange(optim, re, swi, WM, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T,
legend = "right")
task_based
param_based <- heatmap(cors) +
labs(title = "Convergent validity of parameter estimates",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_hline(yintercept = 1.5, color = "white", size = 3)+
geom_hline(yintercept = 4.5, color = "white", size = 3)+
geom_vline(xintercept = 6.5, color = "white", size = 3)+
geom_vline(xintercept = 3.5, color = "white", size = 3)+
theme(legend.position = "none")
param_based <- heatmap(cors) +
labs(title = "Convergent validity of parameter estimates",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_hline(yintercept = 1.5, color = "white", size = 3)+
geom_hline(yintercept = 4.5, color = "white", size = 3)+
geom_vline(xintercept = 6.5, color = "white", size = 3)+
geom_vline(xintercept = 3.5, color = "white", size = 3)+
theme(legend.position = "none")
param_based <- ggarrange(param_based, labels = c("E"))
ggarrange(task_based, param_based, ncol = 2)
task_based <- ggarrange(optim, re, swi, WM, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T,
legend = "right", alight = "hv")
task_based
task_based <- ggarrange(optim, re, swi, WM, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T,
legend = "right", alight = "hv")
task_based
task_based <- ggarrange(optim, re, swi, WM, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T,
legend = "right", align = "hv")
task_based
wm <- readRDS("analysis/4arlb-overviewAll.rds") %>%
subset(session == 1, select = c(ID,OS_recall, SS_recall, WMU_recall)) %>%
self_cor() %>%
mutate(x = factor(x, levels = c("OS_recall", "SS_recall", "WMU_recall"),
labels = c("Oper. span", "Sym. span", "Updating")),
y = factor(y, levels = c("WMU_recall", "SS_recall", "OS_recall"),
labels = c("Updating", "Symmetry span", "Operation span")))
WM <- heatmap(wm) +
labs(title = "Working Memory",
x = element_blank(),
y = element_blank())
WM
task_based <- ggarrange(optim, re, swi, WM, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T,
legend = "right", align = "hv")
task_based
ggarrange(task_based, param_based, ncol = 2)
param_based <- heatmap(cors) +
labs(title = "Parameter estimates",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_hline(yintercept = 1.5, color = "white", size = 3)+
geom_hline(yintercept = 4.5, color = "white", size = 3)+
geom_vline(xintercept = 6.5, color = "white", size = 3)+
geom_vline(xintercept = 3.5, color = "white", size = 3)+
theme(legend.position = "none")
param_based <- ggarrange(param_based, labels = c("E"))
ggarrange(task_based, param_based, ncol = 2)
converge <- ggarrange(task_based, param_based, ncol = 2)
converge
save_my_pdf_and_tiff_and_png(converge,
str_c(my_dir, "/convergence_default"),
w = 15,
h = 6)
my_dir <- "figures/figures-ms/submission-1"
save_my_pdf_and_tiff_and_png(converge,
str_c(my_dir, "/convergence_default"),
w = 15,
h = 6)
save_my_pdf_and_tiff_and_png(converge,
str_c(my_dir, "/convergence_default"),
w = 16,
h = 5)
save_my_pdf_and_tiff_and_png(converge,
str_c(my_dir, "/convergence_default"),
w = 17,
h = 5)
tbl_reliability_bandits <- readRDS("analysis/bandits/reliabilities-ucb.csv")
levels(tbl_reliability_bandits$parameter) = c("Intercept", "Value-Guided", "Directed", "Regret", "p(optimal)", "p(switch)")
levels(tbl_reliability_bandits$task) <- c("Horizon", "Two-Armed", "Restless")
pl_rel <- ggplot(tbl_reliability_bandits %>% filter(parameter != "Interept" & measure != "Task Measure" & task != "Restless"), aes(value, fct_rev(parameter))) +
geom_rect(aes(xmin = 0, xmax = .5, ymin = 0, ymax = 3.5), fill = "tomato3", alpha = .1) +
geom_rect(aes(xmin = .5, xmax = .75, ymin = 0, ymax = 3.5), fill = "orange", alpha = .1) +
geom_rect(aes(xmin = .75, xmax = .9, ymin = 0, ymax = 3.5), fill = "lightgreen", alpha = .1) +
geom_rect(aes(xmin = .9, xmax = 1, ymin = 0, ymax = 3.5), fill = "darkgreen", alpha = .1) +
geom_point(aes(shape = measure), size = 3, color = "black") +
facet_wrap(~ task) +
coord_cartesian(xlim = c(0, 1)) +
labs(title = "Test-Retest Reliability", x = "ICC3(C,1)", y = "") +
theme_bw() +
scale_x_continuous(expand = c(0, 0), breaks = seq(0, .8, by = .2)) +
scale_y_discrete(expand = c(0.025, 0)) +
theme(
strip.background = element_rect(fill = "white"),
text = element_text(size = 22),
legend.position = "bottom",
axis.text.x = element_text(angle = 40, hjust = .95, vjust = .95)
) +
scale_shape_manual(values = c(16, 3), name = "")
pl_rel
save_my_pdf_and_tiff_and_png(
pl_rel,
str_c(my_dir, "/reliability-bandits-ucb"),
12, 5
)
save_my_pdf_and_tiff_and_png(
pl_rel,
str_c(my_dir, "/reliability-bandits-ucb"),
10,4
)
pl_rel <- ggplot(tbl_reliability_bandits %>% filter(parameter != "Interept" & measure != "Task Measure" & task != "Restless"), aes(value, fct_rev(parameter))) +
geom_rect(aes(xmin = 0, xmax = .5, ymin = 0, ymax = 3.5), fill = "tomato3", alpha = .1) +
geom_rect(aes(xmin = .5, xmax = .75, ymin = 0, ymax = 3.5), fill = "orange", alpha = .1) +
geom_rect(aes(xmin = .75, xmax = .9, ymin = 0, ymax = 3.5), fill = "lightgreen", alpha = .1) +
geom_rect(aes(xmin = .9, xmax = 1, ymin = 0, ymax = 3.5), fill = "darkgreen", alpha = .1) +
geom_point(aes(shape = measure), size = 3, color = "black") +
facet_wrap(~ task) +
coord_cartesian(xlim = c(0, 1)) +
labs(title = "Test-Retest Reliability", x = "ICC3(C,1)", y = "") +
theme_bw() +
scale_x_continuous(expand = c(0, 0), breaks = seq(0, .8, by = .2)) +
scale_y_discrete(expand = c(0.025, 0)) +
theme(
strip.background = element_rect(fill = "white"),
text = element_text(size = 22),
legend.position = "none",
axis.text.x = element_text(angle = 40, hjust = .95, vjust = .95)
) +
scale_shape_manual(values = c(16, 3), name = "")
pl_rel
tbl_reliability_bandits <- readRDS("analysis/bandits/reliabilities-hybrid.csv")
levels(tbl_reliability_bandits$parameter) = c("Intercept", "Value-Guided", "Directed", "Random", "Regret", "p(optimal)", "p(switch)")
levels(tbl_reliability_bandits$task) <- c("Horizon", "Two-Armed", "Restless")
pl_rel <- ggplot(tbl_reliability_bandits %>% filter(parameter != "Interept"), aes(value, fct_rev(parameter))) +
geom_rect(aes(xmin = 0, xmax = .5, ymin = 0, ymax = 8), fill = "tomato3", alpha = .1) +
geom_rect(aes(xmin = .5, xmax = .75, ymin = 0, ymax = 8), fill = "orange", alpha = .1) +
geom_rect(aes(xmin = .75, xmax = .9, ymin = 0, ymax = 8), fill = "lightgreen", alpha = .1) +
geom_rect(aes(xmin = .9, xmax = 1, ymin = 0, ymax = 8), fill = "darkgreen", alpha = .1) +
geom_point(aes(shape = measure), size = 3, color = "black") +
facet_wrap(~ task) +
coord_cartesian(xlim = c(0, 1)) +
labs(title = "Test-Retest Reliability", x = "ICC3(C,1)", y = "") +
theme_bw() +
scale_x_continuous(expand = c(0, 0), breaks = seq(0, .8, by = .2)) +
scale_y_discrete(expand = c(0.025, 0)) +
theme(
strip.background = element_rect(fill = "white"),
text = element_text(size = 22),
legend.position = "bottom",
axis.text.x = element_text(angle = 40, hjust = .95, vjust = .95)
) +
scale_shape_manual(values = c(16, 3), name = "")
pl_rel
fixed <- readRDS("analysis/bandits/allFixed.rds") %>%
mutate(predictor = recode(predictor, "delta_mean" = "Value-guided",
"info" = "Directed",
"V" = "Value-guided",
"RU" = "Directed",
"VTU" = "Random"),
task = recode(task, "sam" = "Two-armed", "horizon" = "Horizon", "restless" = "Restless"),
session = recode(session, `1` = "Session 1", `2` = "Session 2"))  %>%
subset(!grepl("ntercept", predictor))
View(fixed)
data <- load_and_prep_bandit_data(s)$horizon
s <- 1
data <- load_and_prep_bandit_data(s)$horizon
h <- 0.5
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
t <- as.data.frame(summary(out[[1]]))
t <- summary(out[[1]])
t <- as.data.frame(summary(out[[1]])$fixed)
View(t)
params <- list()
fixed <- list()
for (s in 1:2){
data <- load_and_prep_bandit_data(s)$sam
out <- fit_model_sam(data, model = "hybrid", hierarchical = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
params[[s]] <- out[[2]]
fixed[[s]] <- as.data.frame(summary(out[[1]])$fixed)
}
sam_params <- params %>% bind_rows(.id = "session") %>%
mutate(estimate = -1*estimate,
ID = parse_number(rownames(.))) # already flipped to be larger number more seeking
sam_fixed <- fixed %>% bind_rows(.id = "session") %>%
mutate(Estimate = -1*Estimate,
low = -1*`u-95% CI`,
`u-95% CI` = -1*`l-95% CI`,
`l-95% CI`= low) %>%
subset(select = -low)# when recoding this here we have to flip upper and lower CI, need temporary variable to avoid recoded versions influencing each other
View(sam_fixed)
View(sam_fixed)
View(horizon)
params <- list()
for (s in 1:2){
data <- load_and_prep_bandit_data(s)$sam
out <- fit_model_sam(data, model = "UCB", hierarchical = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
params[[s]] <- out[[2]]
}
sam_params <- params %>% bind_rows(.id = "session") %>%
mutate(estimate = -1*estimate,
ID = parse_number(rownames(.))) # already flipped to be larger number more seeking
## Horizon
params <- list()
for (s in 1:2){
p <- list()
h <- 0.5
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
p <- out[[2]]
params[[s]] <- p %>%
mutate(ID = parse_number(rownames(.)))
}
horizon_params <- params %>% bind_rows(.id = "session") %>%
mutate(estimate = if_else(predictor == "delta_mean", -1 * estimate, estimate)) # here we recode only for reward
## combine
params <- list(sam = sam_params, horizon = horizon_params) %>%
bind_rows(.id = "task")%>%
subset(select = c("predictor", "estimate", "task", "session","ID"))
restless <- readRDS("analysis/bandits/4arlb-maps-hierarchical.RDS")
rest_params <- restless %>%
pivot_longer(cols = -ID, values_to = "estimate", names_to = "predictor") %>%
mutate(session = as.character(parse_number(predictor)),
predictor = ifelse(grepl("ru", predictor), "RU", "V"),
task = "restless")
params <- list(params, rest_params) %>%
bind_rows()
## save
write.csv(params,"analysis/bandits/AllModelParameters_improved.csv")
saveRDS(params, file ="analysis/bandits/allParams_improved.rds")
s <- 1
h <- 0.5
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
t <- out[[1]]
t
View(t)
samples <- posterior_samples(t, )
samples <- posterior_samples(t, pars = "b_")
View(Sperf)
View(samples)
samples <- list()
s <- list()
for (h in c(-0.5, 0.5)){
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
p <- append(p, list(out[[2]]))
s <- append(s, posterior_samples(out[[1]], pars = "b_"))
}
for (h in c(-0.5, 0.5)){
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
p <- append(p, list(out[[2]]))
t <- out[[1]]
s <- append(s, posterior_samples(t, pars = "b_"))
}
samples <- list()
samp <- list()
p <- list()
s <- 1
for (h in c(-0.5, 0.5)){
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
p <- append(p, list(out[[2]]))
t <- out[[1]]
samp <- append(samp, posterior_samples(t, pars = "b_"))
}
View(samp)
View(samp)
p <- list()
samp <- list()
for (h in c(-0.5, 0.5)){
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
p <- append(p, list(out[[2]]))
t <- out[[1]]
samp <- append(samp, as.data.frame(posterior_samples(t, pars = "b_")))
}
View(samp)
p <- list()
samp <- list()
for (h in c(-0.5, 0.5)){
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
p <- append(p, list(out[[2]]))
t <- out[[1]]
samp <- append(samp, list(as.data.frame(posterior_samples(t, pars = "b_"))))
}
View(samp)
samples[[s]] <- samp[[1]] %>% left_join(samp[[2]])
View(samples)
View(samples[[1]])
left_join(samp[[2]] %>% mutate(ind = 1:nrow(.)), by = ind)
samples[[s]] <- samp[[1]] %>%
mutate(ind = 1:nrow(.))
View(samples[[1]])
samp[[2]]
samp[[1]]
test <- samp[[1]] %>%
mutate(ind = 1:nrow(.))
View(test)
test <- left_join(samp[[1]] %>% mutate(ind = 1:nrow(.)),
samp[[2]] %>% mutate(ind = 1:nrow(.)), by = ind)
test <- left_join(samp[[1]] %>% mutate(ind = 1:nrow(.)),
samp[[2]] %>% mutate(ind = 1:nrow(.)), by = "ind")
View(test)
View(test)
View(test)
test <- left_join(samp[[1]] %>% mutate(ind = 1:nrow(.)),
samp[[2]] %>% mutate(ind = 1:nrow(.)), by = "ind") %>%
mutate(Intercept = b_Intercept.y - b_Intercept.x,# subtract posterior samples of short horizon from long
delta_mean = b_delta_mean.y - b_delta_mean.x,
info = b_info.y - b_info.x) %>%
select(Intercept, delta_mean, info)
table(params$session)
HDIofMCMC = function( sampleVec , credMass=0.95 ) {
# Computes highest density interval from a sample of representative values,
#   estimated as shortest credible interval.
# Arguments:
#   sampleVec
#     is a vector of representative values from a probability distribution.
#   credMass
#     is a scalar between 0 and 1, indicating the mass within the credible
#     interval that is to be estimated.
# Value:
#   HDIlim is a vector containing the limits of the HDI
sortedPts = sort( sampleVec )
ciIdxInc = floor( credMass * length( sortedPts ) )
nCIs = length( sortedPts ) - ciIdxInc
ciWidth = rep( 0 , nCIs )
for ( i in 1:nCIs ) {
ciWidth[ i ] = sortedPts[ i + ciIdxInc ] - sortedPts[ i ]
}
HDImin = sortedPts[ which.min( ciWidth ) ]
HDImax = sortedPts[ which.min( ciWidth ) + ciIdxInc ]
HDIlim = c( HDImin , HDImax )
return( HDIlim )
}
HDIofMCMC(test$Intercept)
HDIofMCMC(test$Intercept)[1]
View(sam_fixed)
## Horizon
params <- list()
samples <- list()
for (s in 1:2){
p <- list()
samp <- list()
for (h in c(-0.5, 0.5)){
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
p <- append(p, list(out[[2]]))
t <- out[[1]]
samp <- append(samp, list(as.data.frame(posterior_samples(t, pars = "b_"))))
}
# subject-level parameters
params[[s]] <- p %>% bind_rows(.id = "horizon") %>%
mutate(horizon = recode(horizon, `1` = "short", `2` = "long"),
ID = parse_number(rownames(.))) %>%
pivot_wider(id_cols = c("ID", "predictor"), names_from = "horizon", values_from = "estimate") %>%
mutate(estimate = long - short) %>%
subset(select = -c(long, short))
# posterior samples of fixed effects
test <- left_join(samp[[1]] %>% mutate(ind = 1:nrow(.)),
samp[[2]] %>% mutate(ind = 1:nrow(.)), by = "ind") %>%
mutate(Intercept = b_Intercept.y - b_Intercept.x,# subtract posterior samples of short horizon from long
delta_mean = b_delta_mean.y - b_delta_mean.x,
info = b_info.y - b_info.x) %>%
select(Intercept, delta_mean, info) %>%
pivot_longer(cols = (1:3), names_to = "predictor", values_to = "estimate") %>%
group_by("predictor") %>%
summarise(Estimate = mean(estimate),
`l-95% CI` = HDIofMCMC(estimate)[1],
`u-95% CI` = HDIofMCMC(estimate)[2])
}
horizon_params <- params %>% bind_rows(.id = "session")
horizon_fixed <- samples %>% bind_rows(.id = "session")
rest_fixed_1 <- readRDS("analysis/bandits/restless-hierarchical-model-posterior-s1.RDS")
View(rest_fixed_1)
colnames(rest_fixed_1)
# extract fixed
fixed <- list()
for (s in c(1,2)){
fixed[[s]] <- readRDS(sprintf("analysis/bandits/restless-hierarchical-model-posterior-s%i.RDS", s)) %>%
select(mu_beta, mu_tau) %>%
pivot_longer(cols = c(1:2), names_to = "predictor", values_to = "estimate") %>%
group_by(predictor) %>%
summarise(Estimate = mean(estimate),
`l-95% CI` = HDIofMCMC(estimate)[1],
`u-95% CI` = HDIofMCMC(estimate)[2])
}
rest_fixed <- fixed %>%
bind_rows(.id = "session")
View(rest_fixed_1)
View(rest_fixed)
View(fixed[[1]])
readRDS(sprintf("analysis/bandits/restless-hierarchical-model-posterior-s%i.RDS", s)) %>%
select(mu_beta, mu_tau) %>%
pivot_longer(cols = c(1:2), names_to = "predictor", values_to = "estimate")
summarise(Estimate = mean(estimate),
`l-95% CI` = HDIofMCMC(estimate)[1],
`u-95% CI` = HDIofMCMC(estimate)[2], by= "predictor")
readRDS(sprintf("analysis/bandits/restless-hierarchical-model-posterior-s%i.RDS", s)) %>%
select(mu_beta, mu_tau) %>%
pivot_longer(cols = c(1:2), names_to = "predictor", values_to = "estimate") %>%
summarise(Estimate = mean(estimate),
`l-95% CI` = HDIofMCMC(estimate)[1],
`u-95% CI` = HDIofMCMC(estimate)[2], by= "predictor")
readRDS(sprintf("analysis/bandits/restless-hierarchical-model-posterior-s%i.RDS", s)) %>%
select(mu_beta, mu_tau) %>%
pivot_longer(cols = c(1:2), names_to = "predictor", values_to = "estimate") %>%
group_by(predictor) %>%
summarise(Estimate = mean(estimate),
`l-95% CI` = HDIofMCMC(estimate)[1],
`u-95% CI` = HDIofMCMC(estimate)[2])
fixed[[s]] <- readRDS(sprintf("analysis/bandits/restless-hierarchical-model-posterior-s%i.RDS", s)) %>%
select(mu_beta, mu_tau) %>%
pivot_longer(cols = c(1:2), names_to = "predictor", values_to = "estimate")
View(fixed[[s]])
## Horizon
params <- list()
samples <- list()
for (s in 1:2){
p <- list()
samp <- list()
for (h in c(-0.5, 0.5)){
data <- load_and_prep_bandit_data(s)$horizon
out <- fit_model_horizon(data[data$Horizon == h, ], model = "Wilson", bayesian = T, full = T, no_horizon = T, use_saved = T)
# inspect the model to ensure everything is nicely converged and stuff
print(out[[1]])
p <- append(p, list(out[[2]]))
t <- out[[1]]
samp <- append(samp, list(as.data.frame(posterior_samples(t, pars = "b_"))))
}
# subject-level parameters
params[[s]] <- p %>% bind_rows(.id = "horizon") %>%
mutate(horizon = recode(horizon, `1` = "short", `2` = "long"),
ID = parse_number(rownames(.))) %>%
pivot_wider(id_cols = c("ID", "predictor"), names_from = "horizon", values_from = "estimate") %>%
mutate(estimate = long - short) %>%
subset(select = -c(long, short))
# posterior samples of fixed effects
samples[[s]] <- left_join(samp[[1]] %>% mutate(ind = 1:nrow(.)),
samp[[2]] %>% mutate(ind = 1:nrow(.)), by = "ind") %>%
mutate(Intercept = b_Intercept.y - b_Intercept.x,# subtract posterior samples of short horizon from long
delta_mean = b_delta_mean.y - b_delta_mean.x,
info = b_info.y - b_info.x) %>%
select(Intercept, delta_mean, info) %>%
pivot_longer(cols = (1:3), names_to = "predictor", values_to = "estimate") %>%
group_by("predictor") %>%
summarise(Estimate = mean(estimate),
`l-95% CI` = HDIofMCMC(estimate)[1],
`u-95% CI` = HDIofMCMC(estimate)[2])
}
horizon_params <- params %>% bind_rows(.id = "session")
horizon_fixed <- samples %>% bind_rows(.id = "session")
View(horizon_fixed)

files <- files[!grepl("temp", files)]
bonus <- data.frame(ID = rep(NA, length(files)),
TotalBonus = NA,
Horizon = NA,
Sam = NA,
Restless = NA)
horizon <- data.frame(ID = rep(1:length(files), each = nBlocksH*nTrialsH),
block = rep(rep(1:nBlocksH, each = nTrialsH), length(files)),
trial = rep(1:nTrialsH, nBlocksH*length(files)),
chosen = NA,
reward = NA,
rt = NA,
session = session)
sam <- data.frame(ID = rep(1:length(files), each = nBlocksS*nTrialsS),
block = rep(rep(1:nBlocksS, each = nTrialsS), length(files)),
trial = rep(1:nTrialsS, nBlocksS*length(files)),
chosen = NA,
reward = NA,
rt = NA,
session = session)
restless <- data.frame(ID = rep(1:length(files), each = nTrialsR),
trial = 1:nTrialsR,
chosen = NA,
reward = NA,
rt = NA,
session = session)
for (i in 1:length(files)){
temp <- fromJSON(paste("data/bandits/",files[i], sep = ""))
### Horizon task
for (block in 2:(nBlocksH+1)){# bc block 1 is practice
for (trial in 1:nTrialsH){
if (length(temp$horizon$choice[[block]]) < trial){next}
horizon$chosen[horizon$ID == i & horizon$block == block-1 & horizon$trial == trial] <- temp$horizon$choice[[block]][[trial]]
horizon$reward[horizon$ID == i & horizon$block == block-1 & horizon$trial == trial] <- temp$horizon$reward[[block]][[trial]]
horizon$rt[horizon$ID == i & horizon$block == block-1 & horizon$trial == trial] <- temp$horizon$time[[block]][[trial]]
}
}
### Sam's task
for (block in 2:(nBlocksS+1)){# bc block 1 is practice
for (trial in 1:nTrialsS){
sam$chosen[sam$ID == i & sam$block == block-1 & sam$trial == trial] <- temp$sam$choice[[block]][[trial]]
sam$reward[sam$ID == i & sam$block == block-1 & sam$trial == trial] <- temp$sam$reward[[block]][[trial]]
sam$rt[sam$ID == i & sam$block == block-1 & sam$trial == trial] <- temp$sam$time[[block]][[trial]]
}
}
## restless
for (trial in 1:nTrialsR){
restless$chosen[restless$ID == i & restless$trial == trial] <- temp$restless$choice[[2]][[trial]]
restless$reward[restless$ID == i & restless$trial == trial] <- temp$restless$reward[[2]][[trial]]
restless$rt[restless$ID == i & restless$trial == trial] <- temp$restless$time[[2]][[trial]]
}
}
View(sam)
get_wd()
get.wd()
getwd()
rewardsH <- fromJSON(paste("task/rewardsHorizon", session, ".json", sep = ""))
horizon$reward1 <- NA
horizon$reward2 <- NA
horizon$Horizon <- NA
block = 2
temp <- as.dataframe(rewardsH[[block]])
temp <- to.dataframe(rewardsH[[block]])
temp <- data.frame(rewardsH[[block]])
rewardsH[[block]]
temp <- data.frame(rewardsH[block])
rewardsH[block]
rewardsH
temp <- data.frame(rewardsH[block, ,])
View(temp)
horizon$reward1[horizon$block == block-1] <- temp$X1
View(temp)
i = 1
temp <- fromJSON(paste("data/bandits/",files[i], sep = ""))
View(temp)
rewardsH[1, ,]
rewardsH[2, ,]
rewardsH[3, ,]
rewardsH <- fromJSON(paste("task/rewardsHorizon", (session+1), ".json", sep = ""))
rewardsH[3, ,]
rewardsH[2, ,]
rewardsH[1, ,]
rewardsH[1, ,]
rewardsH <- fromJSON(paste("task/rewardsHorizon", (session+0), ".json", sep = ""))
rewardsH[1, ,]
rewardsH <- fromJSON(paste("task/rewardsHorizon", (session+0), "_old.json", sep = ""))
rewardsH[1, ,]
temp <- data.frame(rewardsH[block, ,])
horizon$reward1[horizon$block == block-1] <- temp$X1
block = 2
horizon$reward1[horizon$block == block-1] <- temp$X1
temp <- fromJSON(paste("data/bandits/",files[i], sep = ""))
rewardsH[2, ,]
rewardsH <- fromJSON(paste("task/rewardsHorizon", session, "_old.json", sep = ""))
horizon$reward1 <- NA
horizon$reward2 <- NA
horizon$Horizon <- NA
for (block in 2:(nBlocksH+1)){
temp <- data.frame(rewardsH[block, ,])
horizon$reward1[horizon$block == block-1] <- temp$X1
horizon$reward2[horizon$block == block-1] <- temp$X2
}
Horizon <- fromJSON(paste("task/Horizon", session, ".json", sep = ""))
horizon$Horizon[horizon$block == block-1] <- Horizon[block]
rewardsH <- fromJSON(paste("task/rewardsHorizon", session, "_old.json", sep = ""))
Horizon <- fromJSON(paste("task/Horizon", session, ".json", sep = ""))
horizon$reward1 <- NA
horizon$reward2 <- NA
horizon$Horizon <- NA
for (block in 2:(nBlocksH+1)){
temp <- data.frame(rewardsH[block, ,])
horizon$reward1[horizon$block == block-1] <- temp$X1
horizon$reward2[horizon$block == block-1] <- temp$X2
horizon$Horizon[horizon$block == block-1] <- Horizon[block]
}
rewardsS <- fromJSON(paste("task/rewardsSam", session, "_old.json"))
rewardsS <- fromJSON(paste("task/rewardsSam", session, "_old.json", sep = ""))
# set session_id to 1 or 2
# stimulus sets for all tasks are generated for that session
session_id <- 1
my_two_seeds <- c(39737632, 8567389)
set.seed(my_two_seeds[session_id])
sam$reward1 <- NA
sam$reward2 <- NA
sam$cond <- NA
rewardsS <- fromJSON(paste("task/rewardsSam", session, "_old.json", sep = ""))
for (block in 2:(nBlocksS+1)){
temp <- data.frame(rewardsS[block, ,])
sam$reward1[sam$block == block-1] <- temp$X1
sam$reward2[sam$block == block-1] <- temp$X2
}
View(sam)
?rnorm
for (block in 2:(nBlocksS+1)){
temp <- data.frame(rewardsS[block, ,])
sam$reward1[sam$block == block-1] <- temp$X1
sam$reward2[sam$block == block-1] <- temp$X2
# have to infer cond bc I am dumb
cond1 <- ifelse(sd(temp$X1)>2, "F", "S")
cond2 <- ifelse(sd(temp$X2)>2, "F", "S")
sam$cond[sam$block == block-1] <- paste(cond1, cond2, sep = "")
}
table(sam$cond)
for (block in 2:(nBlocksS+1)){
temp <- data.frame(rewardsS[block, ,])
sam$reward1[sam$block == block-1] <- temp$X1
sam$reward2[sam$block == block-1] <- temp$X2
# have to infer cond bc I am dumb
cond1 <- ifelse(sd(temp$X1)>1.5, "F", "S")
cond2 <- ifelse(sd(temp$X2)>1.5, "F", "S")
sam$cond[sam$block == block-1] <- paste(cond1, cond2, sep = "")
}
table(sam$cond)
max(sam$ID)
rewardsR <- fromJSON(paste("task/rewards4ARB", session, ".json", sep = ""))
### restless
restless$reward1 <- NA
restless$reward2 <- NA
restless$reward3 <- NA
restless$reward4 <- NA
rewardsR <- fromJSON(paste("task/rewards4ARB", session, ".json", sep = ""))
restless$reward1 <- NA
restless$reward2 <- NA
restless$reward3 <- NA
restless$reward4 <- NA
rewardsR <- fromJSON(paste("task/rewards4ARB", session, ".json", sep = ""))
temp <- data.frame(rewardsR[[2]])
restless$reward1 <- rep(temp$X1, length(unique(restless$ID)))
restless$reward2 <- rep(temp$X2, length(unique(restless$ID)))
restless$reward3 <- rep(temp$X3, length(unique(restless$ID)))
restless$reward4 <- rep(temp$X4, length(unique(restless$ID)))
View(rewardsR)
View(temp)
View(restless)
save(horizon, sam, restless, file = "data/lab_pilot.Rda")
data <- horizon
data$optimalR <- ifelse(data$reward1>data$reward2, data$reward1, data$reward2)
View(data)
data$regret <- data$optimalR - data$reward
regret <- ddply(data, ~sub+trial+cond, summarise, regret = meann(regret))
data <- sam
data$optimalR <- ifelse(data$reward1>data$reward2, data$reward1, data$reward2)
data$regret <- data$optimalR - data$reward
regret <- ddply(data, ~ID+trial+cond, summarise, regret = meann(regret))
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
regret <- ddply(data, ~ID+trial+cond, summarise, regret = meann(regret))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6) +
facet_wrap(vars(cond))+
xlim(c(0, max(regret$regret)))
data$optimal <- ifelse(data$reward1 > data$reward2, 0, 1)
data$chooseBest <- ifelse(data$C == data$optimal, 1, 0)
best <- ddply(data, ~sub+trial+cond, summarise, optimal = meann(chooseBest))
head(best)
data$chooseBest <- ifelse(data$choice == data$optimal, 1, 0)
data$optimal <- ifelse(data$reward1 > data$reward2, 0, 1)
data$chooseBest <- ifelse(data$choice == data$optimal, 1, 0)
data$chooseBest <- ifelse(data$chosen == data$optimal, 1, 0)
best <- ddply(data, ~ID+trial+cond, summarise, optimal = meann(chooseBest))
head(best)
# line plot
ggplot(best, aes(x = trial, y = optimal, group = sub)) + geom_line(alpha = 0.1)+
ggtitle("Proportion of optimal choices over trials on Sam's task")+
facet_wrap(vars(cond))
ggplot(best, aes(x = optimal))+ geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6) +
facet_wrap(vars(cond))+
xlim(c(0, 1))+
geom_vline(aes(xintercept = 0.5))
View(restless)
data <- restless
data$optimalR <- rep(apply(as.array(data$trial[data$ID == 1]), 1, function(x) max(c(data$reward1[data$trial == x],
data$reward2[data$trial == x],
data$reward3[data$trial == x],
data$reward4[data$trial == x]))),
length(unique(data$ID)))
data$regret <- data$optimalR - data$reward
data$trialBin <- round(data$trial/10)
regret <- ddply(data, ~ID+trialBin, summarise, regret = meann(regret))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(trialBin)), alpha = 0.6) +
facet_wrap(vars(cond))+
xlim(c(0, max(regret$regret)))
regret <- ddply(data, ~ID+trialBin, summarise, regret = meann(regret))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(trialBin)), alpha = 0.6) +
facet_wrap(vars(cond))+
xlim(c(0, max(regret$regret)))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(trialBin)), alpha = 0.6) +
xlim(c(0, max(regret$regret)))
which(cbind(data$reward1, data$reward2, data$reward3, data$reward4) == data$optimalR)
cbind(data$reward1, data$reward2, data$reward3, data$reward4)
data$optimal <- rep(apply(as.array(data$trial[data$ID == 1]), 1, function(x) which(c(data$reward1[data$trial == x & ID == 1],
data$reward2[data$trial == x & ID == 1],
data$reward3[data$trial == x & ID == 1],
data$reward4[data$trial == x & ID == 1]) == data$optimalR[data$trial == x & data$ID == 1])),
length(unique(data$ID)))
data$optimal <- rep(apply(as.array(data$trial[data$ID == 1]), 1, function(x) which(c(data$reward1[data$trial == x & data$ID == 1],
data$reward2[data$trial == x & data$ID == 1],
data$reward3[data$trial == x & data$ID == 1],
data$reward4[data$trial == x & data$ID == 1]) == data$optimalR[data$trial == x & data$ID == 1])),
length(unique(data$ID)))
data$chooseBest <- ifelse(data$reward == data$optimalR, 1, 0)
best <- ddply(data, ~ID+trialBin, summarise, optimal = meann(chooseBest))
head(best)
ggplot(best, aes(x = optimal))+ geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6) +
xlim(c(0, 1))+
geom_vline(aes(xintercept = 0.5))
ggplot(best, aes(x = optimal))+ geom_density_ridges(aes(y = as.factor(trialBin)), alpha = 0.6) +
xlim(c(0, 1))+
geom_vline(aes(xintercept = 0.5))
data <- horizon
data$optimalR <- ifelse(data$reward1>data$reward2, data$reward1, data$reward2)
data$regret <- data$optimalR - data$reward
regret <- ddply(data, ~ID+trial+cond, summarise, regret = meann(regret))
regret <- ddply(data, ~ID+trial+Horizon, summarise, regret = meann(regret))
data <- subset(data, trial > 4)
regret <- ddply(data, ~ID+Horizon, summarise, regret = meann(regret))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(Horizon), alpha = 0.6) +
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(Horizon), alpha = 0.6)) +
xlim(c(0, max(regret$regret)))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(Horizon), alpha = 0.6)) +
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(Horizon), alpha = 0.6)) +
xlim(c(0, max(regret$regret)))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(Horizon)), alpha = 0.6) +
xlim(c(0, max(regret$regret)))
data$optimal <- ifelse(data$reward1 > data$reward2, 0, 1)
data$chooseBest <- ifelse(data$chosen == data$optimal, 1, 0)
best <- ddply(data, ~ID+trial+cond, summarise, optimal = meann(chooseBest))
best <- ddply(data, ~ID+Horizon, summarise, optimal = meann(chooseBest))
head(best)
ggplot(best, aes(x = optimal))+ geom_density_ridges(aes(y = as.factor(Horizon)), alpha = 0.6) +
xlim(c(0, 1))+
geom_vline(aes(xintercept = 0.5))
best <- ddply(data, ~ID+Horizon, summarise, optimal = meann(chooseBest))
head(best)
ggplot(best, aes(x = optimal))+ geom_density_ridges(aes(y = as.factor(Horizon)), alpha = 0.6) +
xlim(c(0, 1))+
geom_vline(aes(xintercept = 0.5))
View(best)
View(restless)
View(data)
View(best)
library(ggplot2)
theme_set(theme_classic(base_size = 15))
library(lme4)
library(plyr)
library(brms)
library(tidyr)
library(ggridges)
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
1+1
2+2
################### same checks on pilot data from lab ##############
load("data/lab_pilot.Rda")
data <- restless
data$optimalR <- rep(apply(as.array(data$trial[data$ID == 1]), 1, function(x) max(c(data$reward1[data$trial == x],
data$reward2[data$trial == x],
data$reward3[data$trial == x],
data$reward4[data$trial == x]))),
length(unique(data$ID)))
data$regret <- data$optimalR - data$reward
data$trialBin <- round(data$trial/10)
regret <- ddply(data, ~ID+trialBin, summarise, regret = meann(regret))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(trialBin)), alpha = 0.6) +
xlim(c(0, max(regret$regret)))
data$chooseBest <- ifelse(data$reward == data$optimalR, 1, 0)
View(data)
data <- horizon
data$optimalR <- ifelse(data$reward1>data$reward2, data$reward1, data$reward2)
data$regret <- data$optimalR - data$reward
data <- subset(data, trial > 4)
regret <- ddply(data, ~ID+Horizon, summarise, regret = meann(regret))
# dist plot
ggplot(regret, aes(x = regret))+ geom_density_ridges(aes(y = as.factor(Horizon)), alpha = 0.6) +
xlim(c(0, max(regret$regret)))
data$optimal <- ifelse(data$reward1 > data$reward2, 0, 1)
data$chooseBest <- ifelse(data$chosen == data$optimal, 1, 0)
best <- ddply(data, ~ID+Horizon, summarise, optimal = meann(chooseBest))
head(best)
ggplot(best, aes(x = optimal))+ geom_density_ridges(aes(y = as.factor(Horizon)), alpha = 0.6) +
xlim(c(0, 1))+
geom_vline(aes(xintercept = 0.5))
data <- subset(data, Horizon == 10)
best <- ddply(data, ~ID+trial, summarise, optimal = meann(chooseBest))
head(best)
ggplot(best, aes(x = optimal))+ geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6) +
xlim(c(0, 1))+
geom_vline(aes(xintercept = 0.5))
data <- horizon
data$optimalR <- ifelse(data$reward1>data$reward2, data$reward1, data$reward2)
data$regret <- data$optimalR - data$reward
data$diff <- data$reward1 - data$reward2
hist(data$diff)
ggplot(data, aes(x = diff)) + geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6)+
facet_wrap(vars(Horizon))
data$reward1[data$Horizon == 5 & data$trial > 5] <- NA
data$reward2[data$Horizon == 5 & data$trial > 5] <- NA
ggplot(data, aes(x = diff)) + geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6)+
facet_wrap(vars(Horizon))
data$diff <- data$reward1 - data$reward2
ggplot(data, aes(x = diff)) + geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6)+
facet_wrap(vars(Horizon))
ggplot(data, aes(x = diff)) + geom_histogram_ridges(aes(y = as.factor(trial)), alpha = 0.6)+
facet_wrap(vars(Horizon))
ggplot(data, aes(x = diff)) + geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6)+
geom_jitter()+
facet_wrap(vars(Horizon))
ggplot(data, aes(x = diff)) + geom_density_ridges(aes(y = as.factor(trial)), alpha = 0.6)+
geom_jitter(aes(y = trial))+
facet_wrap(vars(Horizon))
# set working directory to where this file is
# Get the full file name of the current script
script_full_name <- sys.frame(1)$ofile
# set working directory to where this file is
# Get the full file name of the current script
script_full_name <- sys.frame(1)$ofile
# set working directory to where this file is
# Get the full file name of the current script
script_full_name <- sys.frame()
# Get the directory name of the current script
script_dir <- dirname(script_full_name)
# set working directory to where this file is
# Get the full file name of the current script
script_full_name <- sys.frame(1)
# Get the directory name of the current script
script_dir <- dirname(script_full_name)
# Set the working directory to the script directory
setwd("/Users/kwitte/Documents/GitHub/gpt-trauma-induction/src/analyses")
############## first look at the data from the trauma stai ##############
library(ggplot2)
theme_set(theme_classic(base_size = 14))
library(plyr)
library(jsonlite)
# Set the working directory to the script directory
setwd("/Users/kwitte/Documents/GitHub/gpt-trauma-induction/src/analyses")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
noPreprompt <- fromJSON("../results/gpt4_brief_stai_0.json")
View(noPreprompt)
noPreprompt <- noPreprompt$none$none
noPreprompt <- fromJSON("../results/gpt4_brief_stai_0.json")
noPreprompt <- unlist(noPreprompt$none$none[[1]])
noPreprompt
hist(noPreprompt)
table(noPreprompt)
trauma <- fromJSON("../results/gpt4_brief_trauma_stai_0.json")
View(trauma)
trauma_import <- fromJSON("../results/gpt4_brief_trauma_stai_0.json")
colnames(trauma_import)
variables(trauma_import)
trauma <- data.frame(trauma_import[[1:5]])
trauma_import[[1:5]]
trauma_import[1:5]
trauma <- data.frame(trauma_import[1:5])
colMeans(trauma)
rowMeans(trauma)
hist(trauma)
hist(c(trauma))
hist(as.numeric(c(trauma)))
##############
# the stai has reversed items so reverse those back
stai <- read.csv("../STAI/questionnaires.csv")
##############
# the stai has reversed items so reverse those back
stai <- read.csv("../STAI/questionnaires.csv", sep = ";")
View(stai)
noPreprompt <- fromJSON("../results/gpt4_brief_stai_0.json")
noPreprompt <- data.frame(response = unlist(noPreprompt$none$none[[1]]),
reveresed = stai$Reverse.coded)
##############
# the stai has reversed items so reverse those back
stai <- read.csv("../STAI/questionnaires.csv", sep = ";")
noPreprompt <- fromJSON("../results/gpt4_brief_stai_0.json")
noPreprompt <- data.frame(response = unlist(noPreprompt$none$none[[1]]),
reveresed = stai$Reverse.coded)
unlist(noPreprompt$none$none[[1]]
)
stai <- subset(stai, !is.na(X))
noPreprompt <- fromJSON("../results/gpt4_brief_stai_0.json")
noPreprompt <- data.frame(response = unlist(noPreprompt$none$none[[1]]),
reveresed = stai$Reverse.coded)
# reverse them back
noPreprompt$response[noPreprompt$reveresed == 1] <- 5-noPreprompt$response[noPreprompt$reveresed == 1]
table(noPreprompt)
trauma_import <- fromJSON("../results/gpt4_brief_trauma_stai_0.json")
names(trauma_import)
trauma <- data.frame()
colnames(trauma) <- names(trauma_import)[1:5]
?data.frame
conds <- names(trauma_import)[1:5]
data.frame(conds[1] = NA)
data.frame(test = NA)
trauma <- data.frame(conds)
View(trauma)
conds <- data.frame(names(trauma_import)[1:5])
View(conds)
trauma <- data.frame(reversed = stai$Reverse.coded)
for (i in 1:length(conds)){
trauma[:,i+1] <- NA
for (i in 1:length(conds)){
trauma[,i+1] <- NA
}
unlist(trauma_import[i]$none)
trauma_import[i]
trauma_import[i][1]
trauma_import[i][1]
trauma_import[[i]][[1]]
unlist(trauma_import[[i]][[1]])
trauma[,i+1] <-unlist(trauma_import[[i]][[1]])
View(trauma_import)
View(trauma)
for (i in 1:length(conds)){
trauma[,i+1] <-unlist(trauma_import[[i]][[1]])
}
conds <- names(trauma_import)[1:5]
trauma_import <- fromJSON("../results/gpt4_brief_trauma_stai_0.json")
conds <- names(trauma_import)[1:5]
trauma <- data.frame(reversed = stai$Reverse.coded)
for (i in 1:length(conds)){
trauma[,i+1] <-unlist(trauma_import[[i]][[1]])
}
colnames(trauma)[2:6]
colnames(trauma)[2:6] <- conds
rauma_import <- fromJSON("../results/gpt4_brief_trauma_stai_0.json")
conds <- names(trauma_import)[1:5]
trauma <- data.frame(reversed = stai$Reverse.coded)
for (i in 1:length(conds)){
trauma[,i+1] <-unlist(trauma_import[[i]][[1]])
trauma[trauma$reversed == 1, i+1] <- 5 - trauma[trauma$reversed == 1, i+1]
}
colnames(trauma)[2:6] <- conds
trauma_import <- fromJSON("../results/gpt4_brief_trauma_relaxation_stai_0.json")
trauma_import <- fromJSON("../results/gpt4_brief_trauma_relaxation_stai_0.json")
conds <- names(trauma_import)
names(trauma_import[[1]])
relax_conds <- names(trauma_import[[1]])
trauma_conds <- names(trauma_import)[1:5]
trauma_relax <- data.frame(reversed = rep(stai$Reverse.coded, length(trauma_conds)*length(relax_conds)))
trauma_relax <- data.frame(reversed = rep(stai$Reverse.coded, length(trauma_conds)*length(relax_conds)),
trauma = rep(trauma_conds, each = nrow(stai)*length(relax_conds)))
trauma_relax <- data.frame(reversed = rep(stai$Reverse.coded, length(trauma_conds)*length(relax_conds)),
trauma = rep(trauma_conds, each = nrow(stai)*length(relax_conds)),
relax = rep(rep(relax_conds, each = nrow(stai)), length(trauma_conds)))
View(trauma_relax)
trauma_relax$response <- NA
j = 1
unlist(trauma_import[[i]][[j]][[1]])
for (i in 1:length(trauma_conds)){
for (j in 1:length(relax_conds)){
trauma_relax$response[trauma_relax$trauma == trauma_conds[i] & trauma_relax$relax == relax_conds[j]] <- unlist(trauma_import[[i]][[j]][[1]])
}
}
trauma_relax$response[trauma_relax$reversed == 1] <- 5 - trauma_relax$response[trauma_relax$reversed == 1]
table(trauma_relax$response, trauma_relax$reversed)
hist(trauma_relax$response)
874*1.5
2170.53-23.28
library(tidyverse)
library(ggplot2)
library(jsonlite)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kwitte/Documents/GitHub/exploration-psychometrics")
load("data/lab_pilot.Rda")
View(horizon)

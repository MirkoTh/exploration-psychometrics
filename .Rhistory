Hparams <- Hparams[order(Hparms$ID)]
Hparams <- Hparams[order(Hparams$ID)]
Hparams <- Hparams[order(Hparams$ID), ]
Sparams <- Sparams[order(Sparams$ID), ]
Rparams <- Rparams[order(Rparams$ID), ]
all <- data.frame(ID = IDs,
measure = rep(c("V", "RU"), each = length(unique(Hparams$ID))),
value = c(Hparams$estimate[Hparams$predictor == "V" & is.element(Hparams$ID, IDs)],
Hparams$estimate[Hparams$predictor == "RU"& is.element(Hparams$ID, IDs)]),
task = "Horizon")
measure = rep(c("V", "RU"), each = length(IDs),
all <- data.frame(ID = IDs,
measure = rep(c("V", "RU"), each = length(IDs)),
value = c(Hparams$estimate[Hparams$predictor == "V" & is.element(Hparams$ID, IDs)],
Hparams$estimate[Hparams$predictor == "RU"& is.element(Hparams$ID, IDs)]),
task = "Horizon")
)
all <- data.frame(ID = IDs,
measure = rep(c("V", "RU"), each = length(IDs)),
value = c(Hparams$estimate[Hparams$predictor == "V" & is.element(Hparams$ID, IDs)],
Hparams$estimate[Hparams$predictor == "RU"& is.element(Hparams$ID, IDs)]),
task = "Horizon")
all <- rbind(all, data.frame(ID = IDs,
measure = rep(c("V", "RU"), each = length(IDs)),
value = c(Sparams$estimate[Sparams$predictor == "V"& is.element(Sparams$ID, IDs)],
Sparams$estimate[Sparams$predictor == "RU"& is.element(Sparams$ID, IDs)]),
task = "2AB"))
# add restless bandit
all <- rbind(all,data.frame(ID = IDs,
measure = rep(c("V", "RU"), each = length(IDs)),
value = c(Rparams$rlb_map_1_v[is.element(Rparams$ID, IDs)],
Rparams$rlb_map_1_ru[is.element(Rparams$ID, IDs)]),
task = "Restless"))
all <- rbind(all, data.frame(ID = IDs,
measure = "regret",
value = regret$regret[is.element(regret$ID, IDs)],
task = regret$model[is.element(regret$ID, IDs)]))
all <- rbind(all, data.frame(ID = IDs,
measure = "p(optimal)",
value = Poptimal$Poptimal[is.element(Poptimal$ID, IDs)],
task = Poptimal$model[is.element(Poptimal$ID, IDs)]))
all <- rbind(all, data.frame(ID = IDs,
measure = "p(switch)",
value = switch$Pswitch[is.element(switch$ID, IDs)],
task = switch$model[is.element(switch$ID, IDs)]))
View(avg)
all <- rbind(all, data.frame(ID = IDs,
measure = avg$measure[is.element(avg$ID, IDs)],
value = avg$score[is.element(avg$ID, IDs)],
task = ""))
View(avg)
View(all)
all$predictor <- paste(all$task, all$measure)
unique(all$predictor)
test <- all[sort(all$measure)]
test <- all[sort(all$measure), ]
View(test)
test <- all[order(all$measure), ]
View(test)
all <- all[order(all$measure), ]
y <- unique(all$predictor)
x <- subset(y, select = (grepl("horizon", y) | grepl("2AB", y) | grepl("restless", y)))
all$task[all$task == "sam"] <- "2AB"
all$predictor <- paste(all$task, all$measure)
unique(all$predictor)
all <- data.frame(ID = IDs,
measure = rep(c("V", "RU"), each = length(IDs)),
value = c(Hparams$estimate[Hparams$predictor == "V" & is.element(Hparams$ID, IDs)],
Hparams$estimate[Hparams$predictor == "RU"& is.element(Hparams$ID, IDs)]),
task = "Horizon")
# add sams task
all <- rbind(all, data.frame(ID = IDs,
measure = rep(c("V", "RU"), each = length(IDs)),
value = c(Sparams$estimate[Sparams$predictor == "V"& is.element(Sparams$ID, IDs)],
Sparams$estimate[Sparams$predictor == "RU"& is.element(Sparams$ID, IDs)]),
task = "2AB"))
# add restless bandit
all <- rbind(all,data.frame(ID = IDs,
measure = rep(c("V", "RU"), each = length(IDs)),
value = c(Rparams$rlb_map_1_v[is.element(Rparams$ID, IDs)],
Rparams$rlb_map_1_ru[is.element(Rparams$ID, IDs)]),
task = "Restless"))
# add task measures
all <- rbind(all, data.frame(ID = IDs,
measure = "regret",
value = regret$regret[is.element(regret$ID, IDs)],
task = regret$model[is.element(regret$ID, IDs)]))
all <- rbind(all, data.frame(ID = IDs,
measure = "p(optimal)",
value = Poptimal$Poptimal[is.element(Poptimal$ID, IDs)],
task = Poptimal$model[is.element(Poptimal$ID, IDs)]))
all <- rbind(all, data.frame(ID = IDs,
measure = "p(switch)",
value = switch$Pswitch[is.element(switch$ID, IDs)],
task = switch$model[is.element(switch$ID, IDs)]))
# add questionnaires
all <- rbind(all, data.frame(ID = IDs,
measure = avg$measure[is.element(avg$ID, IDs)],
value = avg$score[is.element(avg$ID, IDs)],
task = ""))
all$task[all$task == "sam"] <- "2AB"
all$predictor <- paste(all$task, all$measure)
unique(all$predictor)
all$task[all$task == "horizon"] <- "Horizon"
all$task[all$task == "restless"] <- "Restless"
all$predictor <- paste(all$task, all$measure)
unique(all$predictor)
x <- c("Horizon V", "2AB V", "Restless V", "Horizon RU", "2AB RU", "Restless RU",
"Horizon regret", "2AB regret", "Restless regret",
"Horizon p(optimal)", "2AB p(optimal)", "Restless p(optimal)",
"Horizon p(switch)", "2AB p(switch)", "Restless p(switch)")
y <- c(x, " CEI", " BIG_5", " STICSAcog", " STICSAsoma", " PHQ_9")
cors <- data.frame(x = rep(x, length(y)),
y = rep(y, each = length(x)),
cor = NA)
View(cors)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(all$value[all$predictor == cors$x[x]],
all$value[all$predictor == cors$y[x]]))
ggplot(cors, aes(x, y, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2))) + labs(title = "correlation of model parameters and WM performance",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2))) + labs(title = "correlation of model parameters and WM performance",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cors$x <- factor(cors$x, levels = cors$x, labels = cors$x)
cors$y <- factor(cors$y, levels = cors$y, labels = cors$y)
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2))) + labs(title = "correlation of model parameters and WM performance",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2))) + labs(title = "correlation of model parameters and WM performance",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(
strip.background = element_rect(fill = "white"),
text = element_text(size = 22)
)
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of model parameters and WM performance",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
x <- c("Horizon V", "2AB V", "Restless V", "Horizon RU", "2AB RU", "Restless RU",
"Horizon p(optimal)", "2AB p(optimal)", "Restless p(optimal)",
"Horizon p(switch)", "2AB p(switch)", "Restless p(switch)")
y <- c(" CEI", " BIG_5", " STICSAcog", " STICSAsoma", " PHQ_9")
cors <- data.frame(x = rep(x, length(y)),
y = rep(y, each = length(x)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(all$value[all$predictor == cors$x[x]],
all$value[all$predictor == cors$y[x]]))
cors$x <- factor(cors$x, levels = cors$x, labels = cors$x)
cors$y <- factor(cors$y, levels = cors$y, labels = cors$y)
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of model parameters and WM performance",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
all$value[all$measure == "V"] <- -1 * all$value[all$measure == "V"]
all$value[all$measure == "RU"] <- -1 * all$value[all$measure == "RU"]
x <- c("Horizon V", "2AB V", "Restless V", "Horizon RU", "2AB RU", "Restless RU",
"Horizon p(optimal)", "2AB p(optimal)", "Restless p(optimal)",
"Horizon p(switch)", "2AB p(switch)", "Restless p(switch)")
y <- c(" CEI", " BIG_5", " STICSAcog", " STICSAsoma", " PHQ_9")
cors <- data.frame(x = rep(x, length(y)),
y = rep(y, each = length(x)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(all$value[all$predictor == cors$x[x]],
all$value[all$predictor == cors$y[x]]))
cors$x <- factor(cors$x, levels = cors$x, labels = cors$x)
cors$y <- factor(cors$y, levels = cors$y, labels = cors$y)
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of model parameters and WM performance",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white")+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_fill_continuous(limits = c(-1,1))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_x_discrete(labels = labeller(levels = c("CEI", "BIG_5", "STICSAcog", "STICSAsoma", "PHQ_9"), labels = c("exploration", "openness", "cog. anxiety", "soma. anxiety", "depression")))
?labeller
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_x_discrete(labels = labeller(c("CEI" = "exploration", "BIG_5" = "openness", "STICSAcog" = "cog. anxiety", "STICSAsoma" = "soma. anxiety", "PHQ_9" = "depression")))
labeller(c("CEI" = "exploration", "BIG_5" = "openness", "STICSAcog" = "cog. anxiety", "STICSAsoma" = "soma. anxiety", "PHQ_9" = "depression"))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_x_discrete(labels = as_labeller(c("CEI" = "exploration", "BIG_5" = "openness", "STICSAcog" = "cog. anxiety", "STICSAsoma" = "soma. anxiety", "PHQ_9" = "depression")))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
scale_x_discrete(labels = as_labeller(c(" CEI" = "exploration", " BIG_5" = "openness", " STICSAcog" = "cog. anxiety", " STICSAsoma" = "soma. anxiety", " PHQ_9" = "depression")))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 55, hjust = 1))+
scale_x_discrete(labels = as_labeller(c(" CEI" = "exploration", " BIG_5" = "openness", " STICSAcog" = "cog. anxiety", " STICSAsoma" = "soma. anxiety", " PHQ_9" = "depression")))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 35, hjust = 1))+
scale_x_discrete(labels = as_labeller(c(" CEI" = "exploration", " BIG_5" = "openness", " STICSAcog" = "cog. anxiety", " STICSAsoma" = "soma. anxiety", " PHQ_9" = "depression")))
ggplot(cors, aes(y, x, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "correlation of task measures and questionnaire scores",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 25, hjust = 1))+
scale_x_discrete(labels = as_labeller(c(" CEI" = "exploration", " BIG_5" = "openness", " STICSAcog" = "cog. anxiety", " STICSAsoma" = "soma. anxiety", " PHQ_9" = "depression")))
library(plyr)
library(ggplot2)
#library(jsonlite)
library(brms)
#library(ggridges)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
load("analysis/bandits/banditsWave1.Rda")
horizon1 <- horizon
sam1 <- sam
restless1 <- restless
load("analysis/bandits/banditsWave2.Rda")
horizon2 <- horizon
sam2 <- sam
restless2 <- restless
### get IDs that are in both sessions
IDs <- intersect(horizon1$ID, horizon2$ID)
horizon1 <- subset(horizon1, is.element(ID, IDs))
horizon2 <- subset(horizon2, is.element(ID, IDs))
horizon <- rbind(horizon1, horizon2)
sam1 <- subset(sam1, is.element(ID, IDs))
sam2 <- subset(sam2, is.element(ID,IDs))
sam <- rbind(sam1, sam2)
restless1 <- subset(restless1, is.element(ID, IDs))
restless2 <- subset(restless2, is.element(ID, IDs))
restless <- rbind(restless1, restless2)
#source("analysis/recovery_utils.R")
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
rel_collect <- data.frame(task = c("horizon", "sam", "restless"),
Poptimal = NA,
regret = NA,
Pswitch = NA,
V = NA,
RU = NA,
Intercept = NA)
horizon$optimal <- ifelse(horizon$reward1 > horizon$reward2, 0, 1)
horizon$chooseBest <- ifelse(horizon$chosen == horizon$optimal, 1, 0)
Hperf <- ddply(horizon[horizon$trial > 4, ], ~ID+session,summarise, Poptim = meann(chooseBest))
sam$optimal <- ifelse(sam$reward1 > sam$reward2, 0, 1)
sam$chooseBest <- ifelse(sam$chosen == sam$optimal, 1, 0)
Sperf <- ddply(sam, ~ID + session, summarise, Poptim = meann(chooseBest))
restrewards <- subset(restless, ID == 1, c(reward1, reward2, reward3, reward4, trial, session))
restrewards$best <- apply(as.array(1:nrow(restrewards)), 1, function(x) max(c(restrewards$reward1[x],
restrewards$reward2[x],
restrewards$reward3[x],
restrewards$reward4[x])))
best <- function(df){
rewards <- subset(df, select = grepl("reward", colnames(df)))
rewards <- subset(rewards, select = -reward)
best <- apply(as.array(1:nrow(rewards)), 1, function(x) max(rewards[x,]))
return(best)
}
horizon$best <- best(horizon)
sam$best <- best(sam)
restless$best <- best(restless)
horizon$chooseBest <- ifelse(horizon$reward == horizon$best, 1, 0)
Hperf <- ddply(horizon[horizon$trial > 4, ], ~ID+session,summarise, Poptim = meann(chooseBest))
sam$chooseBest <- ifelse(sam$reward == sam$best, 1, 0)
Sperf <- ddply(sam, ~ID + session, summarise, Poptim = meann(chooseBest))
restless$chooseBest <- ifelse(restless$reward == restless$best, 1, 0)
best <- function(df){
rewards <- subset(df, select = grepl("reward", colnames(df)))
rewards <- subset(rewards, select = -reward)
best <- apply(as.array(1:nrow(rewards)), 1, function(x) max(rewards[x,]))
return(best)
}
horizon$best <- best(horizon)
sam$best <- best(sam)
restless$best <- best(restless)
horizon$chooseBest <- ifelse(horizon$reward == horizon$best, 1, 0)
Hperf <- ddply(horizon[horizon$trial > 4, ], ~ID+session,summarise, Poptim = meann(chooseBest))
sam$chooseBest <- ifelse(sam$reward == sam$best, 1, 0)
Sperf <- ddply(sam, ~ID + session, summarise, Poptim = meann(chooseBest))
restless$chooseBest <- ifelse(restless$reward == restless$best, 1, 0)
Rperf <- ddply(restless, ~ID+session, summarise, Poptim = meann(chooseBest))
Hperf$model <- "horizon"
Sperf$model <- "sam"
Rperf$model <- "restless"
Perfs <- rbind(Hperf, Sperf, Rperf)
models <- c("horizon", "sam", "restless")
cors <- data.frame(session1 = rep(models, length(models)),
session2 = rep(models, each = length(models)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 2], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of P(optimal) session 1 and 2"
)
# save this for the final big plot
rel_collect$Poptimal <- cors$cor[cors$session1 == cors$session2]
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 1], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "agreement of P(optimal) between bandit tasks session 1")
ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(optimal)",
x = element_blank(), y = element_blank())+
theme(axis.text.x = element_text(angle = 25, hjust = 1))
ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(optimal)",
x = element_blank(), y = element_blank())
ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(optimal)",
x = element_blank(), y = element_blank())+
scale_x_discrete(labels = as_labeller("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB"))
ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(optimal)",
x = element_blank(), y = element_blank())+
scale_x_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))
ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(optimal)",
x = element_blank(), y = element_blank())+
scale_x_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))+
scale_y_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))
p1 <- ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(optimal)",
x = element_blank(), y = element_blank())+
scale_x_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))+
scale_y_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))
horizon$prev <- c(NA, horizon$chosen[1:nrow(horizon)-1])
horizon$switch <- ifelse(horizon$chosen == horizon$prev, 0, 1)
horizon$switch[horizon$trial == 1] <- NA
sam$prev <- c(NA, sam$chosen[1:nrow(sam)-1])
sam$switch <- ifelse(sam$chosen == sam$prev, 0, 1)
sam$switch[sam$trial == 1] <- NA
restless$prev <- c(NA, restless$chosen[1:nrow(restless)-1])
restless$switch <- ifelse(restless$chosen == restless$prev, 0, 1)
restless$switch[restless$trial == 1] <- NA
Hswitch <- ddply(horizon[horizon$trial > 4, ],~ID+session,summarise, Pswitch = meann(switch))
Sswitch <- ddply(sam, ~ID+session,summarise, Pswitch = meann(switch))
Rswitch <- ddply(restless, ~ID+session, summarise, Pswitch = meann(switch))
Hswitch$model <- "horizon"
Sswitch$model <- "sam"
Rswitch$model <- "restless"
switch <- rbind(Hswitch, Sswitch, Rswitch)
ggplot(switch, aes(Pswitch, fill = as.factor(session))) + geom_histogram(position = "identity", alpha = 0.3) + facet_wrap(vars(model), scales = "free")
models <- c("horizon", "sam", "restless")
cors <- data.frame(session1 = rep(models, length(models)),
session2 = rep(models, each = length(models)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(switch$Pswitch[switch$model == cors$session1[x] & switch$session == 1],
switch$Pswitch[switch$model == cors$session2[x] & switch$session == 2], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of switch probability between session 1 and 2")
# save this for the final big plot
rel_collect$Pswitch <- cors$cor[cors$session1 == cors$session2]
### look at agreement within a session
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(switch$Pswitch[switch$model == cors$session1[x] & switch$session == 1],
switch$Pswitch[switch$model == cors$session2[x] & switch$session == 1], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "agreement of switch probability within session 1")
p1 <- ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(optimal)",
x = element_blank(), y = element_blank())+
scale_x_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))+
scale_y_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))
p1
p2 <- ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(switch)",
x = element_blank(), y = element_blank())+
scale_x_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))+
scale_y_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))
p2
Hperf <- ddply(horizon[horizon$trial > 4, ], ~ID+session,summarise, Poptim = meann(chooseBest))
sam$chooseBest <- ifelse(sam$reward == sam$best, 1, 0)
Sperf <- ddply(sam, ~ID + session, summarise, Poptim = meann(chooseBest))
restless$chooseBest <- ifelse(restless$reward == restless$best, 1, 0)
Rperf <- ddply(restless, ~ID+session, summarise, Poptim = meann(chooseBest))
Hperf$model <- "horizon"
Sperf$model <- "sam"
Rperf$model <- "restless"
Perfs <- rbind(Hperf, Sperf, Rperf)
models <- c("horizon", "sam", "restless")
cors <- data.frame(session1 = rep(models, length(models)),
session2 = rep(models, each = length(models)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 2], use = "pairwise.complete.obs"))
ggplot(cors, aes(x = session1, y = session2, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + labs(title = "correlation of P(optimal) session 1 and 2"
)
# save this for the final big plot
rel_collect$Poptimal <- cors$cor[cors$session1 == cors$session2]
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(Perfs$Poptim[Perfs$model == cors$session1[x] & Perfs$session == 1],
Perfs$Poptim[Perfs$model == cors$session2[x] & Perfs$session == 1], use = "pairwise.complete.obs"))
p1 <- ggplot(cors, aes(session1, session2, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(optimal)",
x = element_blank(), y = element_blank())+
scale_x_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))+
scale_y_discrete(labels = as_labeller(c("horizon" = "Horizon", "restless" = "Restless", "sam" = "2AB")))
p1
load("analysis/bandits/modellingResults/fitHorizonSession1UCB_full_horizon10only.Rda")
Hparams <- trueParams
Hparams$ID <- parse_number(rownames(Hparams))
load("analysis/bandits/modellingResults/fitSamSession1UCB_hierarchical.Rda")
Sparams <- trueParams
Sparams$ID <- parse_number(rownames(Sparams))
restparams <- readRDS("analysis/bandits/4arlb-maps-hierarchical.RDS")
Rparams <- subset(restparams, select = grepl(1, colnames(restparams)) )
Rparams$ID <- restparams$ID
IDs <- intersect(Hparams$ID, Sparams$ID)
IDs <- intersect(IDs, Rparams$ID)
Hparams <- Hparams[order(Hparams$ID), ]
Sparams <- Sparams[order(Sparams$ID), ]
Rparams <- Rparams[order(Rparams$ID), ]
View(Rparams)
View(Sparams)
IDs <- IDs[order(IDs)]
params <- data.frame(ID = rep(IDs, 3),
task = rep(c("Horizon", "Restless", "2AB"), each = length(IDs)),
V = c(Hparams$estimate[Hparams$predictor == "V" & is.element(Hparams$ID, IDs)],
Sparams$estimate[Sparams$predictor == "V" & is.element(Sparams$ID, IDs)],
Rparams$rlb_map_1_v[is.element(Rparams$ID, IDs)]),
RU = c(Hparams$estimate[Hparams$predictor == "RU" & is.element(Hparams$ID, IDs)],
Sparams$estimate[Sparams$predictor == "RU" & is.element(Sparams$ID, IDs)],
Rparams$rlb_map_1_ru[is.element(Rparams$ID, IDs)]))
View(params)
tasks <- c("Horizon", "Restless", "2AB")
cors <- data.frame(x = rep(tasks, length(tasks)),
y = rep(tasks, each = length(tasks)),
cor = NA)
cors$cor <- apply(as.array(1:nrow(cor)), 1, function(x) cor(params$V[params$task == cors$x[x]],
params$V[params$task == cors$y[x]]))
x = 1
params$V[params$task == cors$x[x]]
params$V[params$task == cors$y[x]]
cor(params$V[params$task == cors$x[x]],
params$V[params$task == cors$y[x]])
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(params$V[params$task == cors$x[x]],
params$V[params$task == cors$y[x]]))
View(cors)
p3 <- ggplot(cors, aes(x,y, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "P(switch)",
x = element_blank(), y = element_blank())
p3
p3 <- ggplot(cors, aes(x,y, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "V",
x = element_blank(), y = element_blank())
p3
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(params$RU[params$task == cors$x[x]],
params$RU[params$task == cors$y[x]]))
p4 <- ggplot(cors, aes(x,y, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "RU",
x = element_blank(), y = element_blank())
p4
ggpubr::ggarrange(p1,p2,p3,p4, ncol = 2, nrow = 2, labels = "AUTO")
ggpubr::ggarrange(p1,p2,p3,p4, ncol = 2, nrow = 2, labels = "AUTO", legend = "right")
ggpubr::ggarrange(p1,p2,p3,p4, ncol = 2, nrow = 2, labels = "AUTO", legend = "left")
ggpubr::ggarrange(p1,p2,p3,p4, ncol = 2, nrow = 2, labels = "AUTO", common.legend = "left")
?ggpubr::ggarrange
?ggpubr::ggarrange
library(ggpubr)
?ggarrange
ggpubr::ggarrange(p1,p2,p3,p4, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T)
ggpubr::ggarrange(p1,p2,p3,p4, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T, legend = "right")
cors$x <- factor(cors$x, levels = cors$x, labels = cors$x)
cors$y <- factor(cors$y, levels = cors$y, labels = cors$y)
# V
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(params$V[params$task == cors$x[x]],
params$V[params$task == cors$y[x]]))
p3 <- ggplot(cors, aes(x,y, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "V",
x = element_blank(), y = element_blank())
p3
cors$cor <- apply(as.array(1:nrow(cors)), 1, function(x) cor(params$RU[params$task == cors$x[x]],
params$RU[params$task == cors$y[x]]))
p4 <- ggplot(cors, aes(x,y, fill = cor)) + geom_raster() + scale_fill_gradient2(high = "#66C2A5", low = "#FC8D62", mid = "white", limits = c(-1,1))+
geom_label(aes(label = round(cor, digits = 2)), fill = "white") + labs(title = "RU",
x = element_blank(), y = element_blank())
p4
ggpubr::ggarrange(p1,p2,p3,p4, ncol = 2, nrow = 2, labels = "AUTO", common.legend = T, legend = "right")
?read.csv())
?read.csv()
df <- read.csv("/Users/kristinwitte/Downloads/integer_other_quest_fields.tsv", sep = "tab")
df <- read.csv("/Users/kristinwitte/Downloads/integer_other_quest_fields.tsv", sep = " ")
View(df)
df <- readr::read_tsv("/Users/kristinwitte/Downloads/integer_other_quest_fields.tsv")
colnames(df)
fields <- strsplit(colnames(df), "-")[1]
View(fields)
fields <- substr(colnames(df[ ,2:ncol(df)]), start = 1, stop = 5)
unique(fields)
fields <- unique(fields)
View(df)
library(rstan)

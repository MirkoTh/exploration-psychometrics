rm(list = ls())
library(tidyverse)
library(ids)
library(grid)
library(jsonlite)
path_utils <- c("utils/analysis-utils.R", "utils/plotting-utils.R")
walk(path_utils, source)
first_time <- TRUE # first time script is run? if not, csv can directly be loaded
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
path_utils <- c("utils/analysis-utils.R", "utils/plotting-utils.R")
walk(path_utils, source)
first_time <- TRUE # first time script is run? if not, csv can directly be loaded
folder <- "OS"
files <- fileslist.files(paste("data/all-data/", folder, sep = ""))
files <- list.files(paste("data/all-data/", folder, sep = ""))
for (file in files){
dat <- fromJSON(file)
}
filename <- file
# Split the string by "_"
split_string <- strsplit(filename, "_")
length(split_string)
length(split_string[[1]])
# Split the string by "_"
split_string <- strsplit(filename, "_")[[1]]
idpart <- split_string[length(split_string)]
# Get the last element of the split string and remove ".json"
id <- sub(".json", "", idpart)
filename <- "6579e03fad6f19194fa44c26_temp_data_task_session_0.txt"
# Split the string by "_"
split_string <- strsplit(filename, "_")[[1]]
idpart <- split_string[1]
parse_out_ID <- function(filename, task){
# for wm tasks
if (is.element(task, c("WMU", "SS", "OS"))){
# Split the string by "_"
split_string <- strsplit(filename, "_")[[1]]
idpart <- split_string[length(split_string)]
# Get the last element of the split string and remove ".json"
id <- sub(".json", "", idpart)
} else {
# Split the string by "_"
split_string <- strsplit(filename, "_")[[1]]
id <- split_string[1]
}
return(id)
}
ID <- apply(files, 1, parse_out_ID(x, folder))
ID <- apply(files, 1, function(x) parse_out_ID(x, folder))
ID <- apply(files, 2, function(x) parse_out_ID(x, folder))
ID <- apply(as.array(files), 1, function(x) parse_out_ID(x, folder))
ID
substr(id, 1,1)
as.numeric(substr(id, 1,1))
is.na(as.numeric(substr(id, 1,1)))
parse_out_ID <- function(filename, task){
# for wm tasks
if (is.element(task, c("WMU", "SS", "OS"))){
# Split the string by "_"
split_string <- strsplit(filename, "_")[[1]]
idpart <- split_string[length(split_string)]
# Get the last element of the split string and remove ".json"
id <- sub(".json", "", idpart)
} else {
# Split the string by "_"
split_string <- strsplit(filename, "_")[[1]]
id <- split_string[1]
}
# test whether this was a test or pilot ID
# prolific IDs all start with a number while our test ids never do
if (is.na(as.numeric(substr(id, 1,1)))){
id <- "test"
}
return(id)
}
ID <- apply(as.array(files), 1, function(x) parse_out_ID(x, folder))
ID <- subset(ID, ID != "test")
IDs <- c()
IDs <- c(IDs, unique(ID))
IDs <- c()
# grab all IDs
for (folder in c("OS", "SS", "WMU", "qs", "bandits")){
files <- list.files(paste("data/all-data/", folder, sep = ""))
ID <- apply(as.array(files), 1, function(x) parse_out_ID(x, folder))
ID <- subset(ID, ID != "test")
IDs <- c(IDs, unique(ID))
}
# grab all IDs
for (folder in c("OS", "SS", "WMU", "qs", "bandits")){
files <- list.files(paste("data/all-data/", folder, sep = ""))
ID <- apply(as.array(files), 1, function(x) parse_out_ID(x, folder))
ID <- subset(ID, ID != "test")
IDs <- unique(c(IDs, ID))
}
warnings()
grepl("\\d",(substr(id, 1,1))
)
!grepl("\\d",substr(id, 1,1))
parse_out_ID <- function(filename, task){
# for wm tasks
if (is.element(task, c("WMU", "SS", "OS"))){
# Split the string by "_"
split_string <- strsplit(filename, "_")[[1]]
idpart <- split_string[length(split_string)]
# Get the last element of the split string and remove ".json"
id <- sub(".json", "", idpart)
} else {
# Split the string by "_"
split_string <- strsplit(filename, "_")[[1]]
id <- split_string[1]
}
# test whether this was a test or pilot ID
# prolific IDs all start with a number while our test ids never do
if (!grepl("\\d",substr(id, 1,1))){
id <- "test"
}
return(id)
}
IDs <- c()
# grab all IDs
for (folder in c("OS", "SS", "WMU", "qs", "bandits")){
files <- list.files(paste("data/all-data/", folder, sep = ""))
ID <- apply(as.array(files), 1, function(x) parse_out_ID(x, folder))
ID <- subset(ID, ID != "test")
IDs <- unique(c(IDs, ID))
}
IDs
lookup <- data.frame(PID = IDs,
ID = 1:length(IDs))
View(lookup)
IDs <- c()
# grab all IDs
for (folder in c("OS", "SS", "WMU", "qs", "bandits")){
files <- list.files(paste("data/wave1/", folder, sep = ""))
ID <- apply(as.array(files), 1, function(x) parse_out_ID(x, folder))
ID <- subset(ID, ID != "test")
IDs <- unique(c(IDs, ID))
}
lookup <- data.frame(PID = IDs,
ID = 1:length(IDs))
View(lookup)
file.info
file.info(file)
file.info(paste("data/wave1/OS", file, sep = ""))
file.info(paste("data/wave1/OS/", file, sep = ""))
load("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics/analysis/bandits/modellingResults/recoveryHorizonSession2UCBbayesianfull.Rda")
View(cors)
p <-ggplot(cors, aes(x = true, y = recovered, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + ggtitle(paste("Recovery of Horizon task using ", model))
model <- "UCB"
ggplot(cors, aes(x = true, y = recovered, fill = cor)) + geom_raster() + scale_fill_gradient2(low = "red", mid = "white", high = "blue")+
geom_text(aes(label = round(cor, digits = 2))) + ggtitle(paste("Recovery of Horizon task using ", model))
file.info(paste("data/all-data/OS/", file, sep = ""))
write.csv(lookup, "data/FINALlookup.csv")
View(hash_ids)
tmp <- read_csv("analysis/bandits/exclusions-session-i.csv") %>%
rename(participant_id = PID, participant_id_randomized = ID) %>%
select(-"...1")
tmp <- read_csv("data/FINALlookup.csv") %>%
rename(participant_id = PID, participant_id_randomized = ID) %>%
select(-"...1")
View(tmp)
tbl_ids_lookup <- tbl_ids_lookup %>%
left_join(tmp, by = c("participant_id"))
path_utils <- c("utils/analysis-utils.R", "utils/plotting-utils.R")
walk(path_utils, source)
?parse_out_id
?parse_out_ID
View(parse_out_ID)
View(parse_out_ID)
path_data <- c("data/2023-11-lab-pilot/", "data/all-data/")[2]
returned_and_timedout <- return_n_timeout()
time_period_wave_I <- c(
make_datetime(2024, 1, 23, 11, tz = "CET"),
make_datetime(2024, 1, 24, 23, 30, tz = "CET")
)
time_period_wave_II <- c(
make_datetime(2024, 3, 4, 13, tz = "CET"),
make_datetime(2024, 3, 11, 4, tz = "CET")
)
hash_ids(
path_data,
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = time_period_wave_I,
random_hashes = FALSE, session_id = 0
)
View(hash_ids)
hash_ids(
"data/wave1",
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = time_period_wave_I,
random_hashes = FALSE, session_id = 0
)
hash_ids(
"data/wave1",
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = time_period_wave_I,
random_hashes = FALSE, session_id = 0
)
rlang::last_trace()
source("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
hash_ids(
"data/wave1",
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = time_period_wave_I,
random_hashes = FALSE, session_id = 0
)
rlang::last_trace()
View(tmp)
source("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
hash_ids(
"data/wave1",
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = time_period_wave_I,
random_hashes = FALSE, session_id = 0
)
hash_ids(
"data/wave1",
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = NULL,
random_hashes = FALSE, session_id = 0
)
source("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
hash_ids(
"data/wave1",
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = NULL,
random_hashes = FALSE, session_id = 0
)
hash_ids(
"data/wave1/",
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = NULL,
random_hashes = FALSE, session_id = 0
)
hash_ids(
"data/wave2/",
c(returned_and_timedout$participants_returned, returned_and_timedout$participants_timeout),
time_period = NULL,
random_hashes = FALSE, session_id = 1
)
View(load_wm_data)
# load all wm data
l_tbl_wm_data <- load_wm_data()
View(load_bandit_and_questionnaire_data)
source("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
source("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
source("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
load_bandit_and_questionnaire_data(1, time_period_wave_I)
source("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
load_bandit_and_questionnaire_data(1, time_period_wave_I)
temp <- fromJSON("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics/data/all-data/bandits/5642444817bdbe00062a1129_data_task_bonus_undefined_session_0.txt")
path_data_bandits <- "data/all-data/bandits/"
files_all <- list.files(path = path_data_bandits)
#mtime_bandits_all <- map(str_c(path_data_bandits, "/", files_all), ~ file.info(.x)$mtime)
idx_not_temp <- !grepl("temp", files_all)
files <- files_all[idx_not_temp]
i <- 2
pid <- lookup$PID[i]
file_ind <- grep(pid, files)
ID <- lookup$ID[i]
temp <- fromJSON(paste(path_data_bandits, files[file_ind], sep = ""))
files[file_ind]
debugSource("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
load_bandit_and_questionnaire_data(1, time_period_wave_I)
debugSource("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
load_bandit_and_questionnaire_data(1, time_period_wave_I)
source("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
load_bandit_and_questionnaire_data(1, time_period_wave_I)
i <- 4
pid <- lookup$PID[i]
file_ind <- grep(pid, files)
ID <- lookup$ID[i]
temp <- fromJSON(paste(path_data_bandits, files[file_ind], sep = ""))
path_data_bandits <- sprintf("data/wave%i/bandits/", session)
path_data_qs <- sprintf("data/wave%i/qs/", session)
session <- 1
path_data_bandits <- sprintf("data/wave%i/bandits/", session)
path_data_qs <- sprintf("data/wave%i/qs/", session)
files_all <- list.files(path = path_data_bandits)
#mtime_bandits_all <- map(str_c(path_data_bandits, "/", files_all), ~ file.info(.x)$mtime)
idx_not_temp <- !grepl("temp", files_all)
files <- files_all[idx_not_temp]
pid <- lookup$PID[i]
file_ind <- grep(pid, files)
ID <- lookup$ID[i]
temp <- fromJSON(paste(path_data_bandits, files[file_ind], sep = ""))
length(temp$comprehensionAttemptsH)>0
if(length(temp$comprehensionAttemptsH)>0){ # if we have this info
comprehension$compAttempts[comprehension$ID == i & comprehension$task == "horizon"] <- temp$comprehensionAttemptsH
comprehension$compAttempts[comprehension$ID == i & comprehension$task == "sam"] <- temp$comprehensionAttemptsS
comprehension$compAttempts[comprehension$ID == i & comprehension$task == "restless"] <- temp$comprehensionAttemptsR
comprehension$compTime[comprehension$ID == i & comprehension$task == "horizon"] <- temp$horizon$comprehensionTime
comprehension$compTime[comprehension$ID == i & comprehension$task == "sam"] <- temp$sam$comprehensionTime
comprehension$compTime[comprehension$ID == i & comprehension$task == "restless"] <- temp$restless$comprehensionTime
comprehension$instTime[comprehension$ID == i & comprehension$task == "horizon"] <- temp$horizon$instructionTime
comprehension$instTime[comprehension$ID == i & comprehension$task == "sam"] <- temp$sam$instructionTime
comprehension$instTime[comprehension$ID == i & comprehension$task == "restless"] <- temp$restless$instructionTime
}
i <- 5
pid <- lookup$PID[i]
file_ind <- grep(pid, files)
ID <- lookup$ID[i]
# check if we have the final data for that participant
if (length(file_ind)>0){
temp <- fromJSON(paste(path_data_bandits, files[file_ind], sep = ""))
}
!file.exists(paste0(path_data_bandits,pid ,"_temp_data_task_session_", session-1,".txt"))
t <- read_file(paste0(path_data_bandits,pid ,"_temp_data_task_session_", session-1,".txt"))
te <- gsub("\\}\n\\{", "},\"next\":{", t)
te <- paste0("{", te, "}")
tem <- fromJSON(te)
substr(te, 1,1) != "{"
substr(te, 1,1)
t <- read_file(paste0(path_data_bandits,pid ,"_temp_data_task_session_", session-1,".txt"))
te <- gsub("\\}\n\\{", "},\"next\":{", t)
if(substr(te, 1,1) != "{"){
te <- paste0("{", te, "}")
}
tem <- fromJSON(te)
pid
t <- read_file(paste0(path_data_bandits,pid ,"_temp_data_task_session_", session-1,".txt"))
t_split <- strsplit(t, "\\}\n\\{")
t
t_split <- strsplit(t, "}\n\\{")
t_split <- strsplit(t, "}\n{")
t_split <- strsplit(t, "\\}\n\\{")
length(t_split[[1]])
length(t)
length(t[[1]])
t_split[[1]]
t_split <- strsplit(t, "\\}\n\\{")[[1]]
te <- t_split[length(t_split)]
te
if(substr(te, 1,1) != "{"){
te <- paste0("{", te)
}
te
tem <- fromJSON(te)
View(tem)
temp <- fromJSON(te)
debugSource("~/Documents/GitHub/exploration-psychometrics/utils/analysis-utils.R")
load_bandit_and_questionnaire_data(1, time_period_wave_I)

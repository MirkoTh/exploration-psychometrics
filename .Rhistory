Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
install.packages("rstan", type = "source")
baymodelUCB <- brm(chosen | trials(80) ~ V*Horizon + RU*Horizon + (RU*Horizon + V*Horizon| ID), family = "binomial",
data = data[data$trial == 5, ],
chains = 2,
cores = 2,
iter = 8000)
library(brms)
install.packages("rstan", type = "source")
q()
# install.packages("remotes")
remotes::install_github("coatless-mac/macrtools")
install.packages("remotes")
# install.packages("remotes")
remotes::install_github("coatless-mac/macrtools")
# We can check if Xcode CLI is present using:
macrtools::is_xcode_cli_installed()
# We can verify gfortran is present as well
macrtools::is_gfortran_installed()
macrtools::macos_rtools_install()
Latenwittchen12
macrtools::macos_rtools_uninstall()
macrtools::macos_rtools_uninstall()
# We can check if Xcode CLI is present using:
macrtools::is_xcode_cli_installed()
# We can verify gfortran is present as well
macrtools::is_gfortran_installed()
# See if Xcode.app IDE is in use
macrtools::is_xcode_app_installed()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
arch <- ifelse(R.version$arch == "aarch64", "arm64", "x86_64")
cat(paste("\nCXX14FLAGS += -O3 -mtune=native -arch", arch, "-ftemplate-depth-256"),
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
q()
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
# install.packages("remotes")
remotes::install_github("coatless-mac/macrtools")
macrtools::macos_rtools_install()
# We can check if Xcode CLI is present using:
macrtools::is_xcode_cli_installed()
# We can verify gfortran is present as well
macrtools::is_gfortran_installed()
macrtools::macos_rtools_uninstall()
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
arch <- ifelse(R.version$arch == "aarch64", "arm64", "x86_64")
cat(paste("\nCXX14FLAGS += -O3 -mtune=native -arch", arch, "-ftemplate-depth-256"),
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
memory.limit(size = 4096)  # Set memory to 4GB (adjust as needed)
library(usethis)
install.packages("usethis")
library(usethis)
usethis::edit_r_environ()
#library(tidyverse)
#library(ggplot2)
library(jsonlite)
library(brms)
theme_set(theme_classic(base_size = 14))
library(tidyverse)
library(ggplot2)
#library(jsonlite)
#library(brms)
theme_set(theme_classic(base_size = 14))
setwd("/Users/kristinwitte/Documents/GitHub/exploration-psychometrics")
load("analysis/bandits/banditsWave1.Rda")
source("analysis/recovery_utils.R")
if (!is.element("KLM0", colnames(sam))) {
sam <- get_KL_into_df(sam)
save(horizon, sam, restless, file = "analysis/bandits/banditsWave1.Rda")
}
if (!is.element("bayMeanL", colnames(horizon))) {
horizon$bayMeanL <- NA
horizon$bayMeanR <- NA
horizon$bayVarL <- NA
horizon$bayVarR <- NA
horizon$row <- 1:nrow(horizon)
for (i in horizon$row[horizon$trial == 5]){
horizon[horizon$row == i, grep("bay", colnames(horizon))] <- bayIncrAtOnce(i, horizon)
}
horizon$V <- scale(getV(horizon$bayMeanL, horizon$bayMeanR))
horizon$RU <- scale(getRU(horizon$bayVarL, horizon$bayVarR))
save(horizon, sam, restless, file = "analysis/bandits/banditsWave1.Rda")
}
se<-function(x){sd(x, na.rm = T)/sqrt(length(na.omit(x)))}
meann <- function(x){mean(x, na.rm = T)}
############### Horizon task ############
horizon$Horizon <- ifelse(horizon$Horizon == 5, -0.5, 0.5)
horizon$info <- horizon$info/2
sam <- read.csv("/Users/kristinwitte/Library/CloudStorage/OneDrive-Personal/CPI/ExplorationReview/PrelimReliabilities/FanEtAl/exp1_bandit_task_scale.csv")
sam$chosen <- ifelse(sam$C == 0, 1, 0)
sam$ID <- sam$sub
V = seq(-1.5, 0.1, 0.1)
RU = seq(-0.7, 1.5, 0.1)
Nsim = 10
pars = data.frame(V = rep(V, each = length(RU)),
RU = rep(RU, length(V)),
reward = NA)
pars$ID <- 1:nrow(pars)
for (i in pars$ID){
temp <- rep(NA, Nsim)
for (k in 1:Nsim){
simdat <- subset(sam, ID == sample(sam$ID, 1), -chosen) # ID does not matter here, everyone observed the same fixed choices anyway
simdat <- sim_data_sam(simdat, pars, i, bootstrapped = T, newRewards = F)
simdat$best <- ifelse(simdat$reward1 > simdat$reward2, 0, 1)
simdat$reward <- ifelse(simdat$chosen == simdat$best, 1, 0)
temp[k] <- mean(simdat$reward)
}
# simdat <- subset(sam, ID == 1, -chosen ) # ID does not matter here, everyone observed the same fixed choices anyway
#
# simdat$chosen <- pars$V[i] * simdat$V + pars$RU[i] * simdat$RU  # setting intercept to 0 bc used scaled params so should approximately be ok
# # logistic function
# simdat$chosen <- 1/(1+exp(-simdat$chosen))
#
# simdat$chosen <- ifelse(simdat$chosen < runif(nrow(simdat)), 0, 1)
#
# simdat$reward <- NA
# simdat$reward <- ifelse(simdat$chosen == 0, simdat$reward1, simdat$reward2)
#
# simdat$max <- ifelse(simdat$reward1 > simdat$reward2, simdat$reward1, simdat$reward2)
#
# simdat$best <- ifelse(simdat$reward == simdat$max, 1, 0)
#
pars$reward[i] <- mean(temp)
}
ggplot(pars, aes(V, RU, fill = reward)) + geom_raster() + scale_fill_gradient(low = "red", high = "blue") + geom_text(aes(label = round(reward, digits = 2)))
df <- pivot_longer(pars, cols = 1:2, values_to = "estimate", names_to = "parameter")
ggplot(df, aes(estimate, reward)) + geom_smooth() + facet_wrap(vars(parameter))
object.size(temp)
library(conflicted)
usethis::edit_r_environ()
